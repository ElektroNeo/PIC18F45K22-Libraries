

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Sat Feb 12 23:38:09 2022

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    18                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    20                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    21                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    22  0000                     
    23                           ; Version 2.20
    24                           ; Generated 05/05/2020 GMT
    25                           ; 
    26                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC18F45K22 Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     
    58                           	psect	smallconst
    59  000600                     __psmallconst:
    60                           	callstack 0
    61  000600  00                 	db	0
    62  000601                     _char_map:
    63                           	callstack 0
    64  000601  7E                 	db	126
    65  000602  30                 	db	48
    66  000603  6D                 	db	109
    67  000604  79                 	db	121
    68  000605  33                 	db	51
    69  000606  5B                 	db	91
    70  000607  5F                 	db	95
    71  000608  70                 	db	112
    72  000609  7F                 	db	127
    73  00060A  7B                 	db	123
    74  00060B  77                 	db	119
    75  00060C  1F                 	db	31
    76  00060D  4E                 	db	78
    77  00060E  3D                 	db	61
    78  00060F  4F                 	db	79
    79  000610  47                 	db	71
    80  000611                     __end_of_char_map:
    81                           	callstack 0
    82  0000                     _ANSELE	set	3900
    83  0000                     _ANSELD	set	3899
    84  0000                     _ANSELC	set	3898
    85  0000                     _ANSELB	set	3897
    86  0000                     _ANSELA	set	3896
    87  0000                     _PORTBbits	set	3969
    88  0000                     _TRISBbits	set	3987
    89  0000                     _INTCONbits	set	4082
    90  0000                     _INTCON	set	4082
    91  0000                     _T1CONbits	set	4045
    92  0000                     _WPUB	set	3937
    93  0000                     _OSCCONbits	set	4051
    94  0000                     _TMR1L	set	4046
    95  0000                     _TMR1H	set	4047
    96  0000                     _PIE1bits	set	3997
    97  0000                     _PIR1bits	set	3998
    98  0000                     _TRISD	set	3989
    99  0000                     _PORTD	set	3971
   100  0000                     _TRISB	set	3987
   101  0000                     _PORTB	set	3969
   102  000611  00                 	db	0	; dummy byte at the end
   103  0000                     
   104                           ; #config settings
   105                           
   106                           	psect	cinit
   107  000F9A                     __pcinit:
   108                           	callstack 0
   109  000F9A                     start_initialization:
   110                           	callstack 0
   111  000F9A                     __initialization:
   112                           	callstack 0
   113                           
   114                           ; Clear objects allocated to BANK0 (75 bytes)
   115  000F9A  EE00  F060         	lfsr	0,__pbssBANK0
   116  000F9E  0E4B               	movlw	75
   117  000FA0                     clear_0:
   118  000FA0  6AEE               	clrf	postinc0,c
   119  000FA2  06E8               	decf	wreg,f,c
   120  000FA4  E1FD               	bnz	clear_0
   121  000FA6                     end_of_initialization:
   122                           	callstack 0
   123  000FA6                     __end_of__initialization:
   124                           	callstack 0
   125  000FA6  9037               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   126  000FA8  9237               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   127  000FAA  0E00               	movlw	low (__Lsmallconst shr (0+16))
   128  000FAC  6EF8               	movwf	tblptru,c
   129  000FAE  0E06               	movlw	high __Lsmallconst
   130  000FB0  6EF7               	movwf	tblptrh,c
   131  000FB2  0100               	movlb	0
   132  000FB4  EF8A  F006         	goto	_main	;jump to C main() function
   133                           
   134                           	psect	bssBANK0
   135  000060                     __pbssBANK0:
   136                           	callstack 0
   137  000060                     _seven_segment:
   138                           	callstack 0
   139  000060                     	ds	75
   140                           
   141                           	psect	cstackBANK0
   142  0000AB                     __pcstackBANK0:
   143                           	callstack 0
   144  0000AB                     main@i_553:
   145                           	callstack 0
   146                           
   147                           ; 1 bytes @ 0x0
   148  0000AB                     	ds	1
   149  0000AC                     main@i:
   150                           	callstack 0
   151                           
   152                           ; 1 bytes @ 0x1
   153  0000AC                     	ds	1
   154  0000AD                     main@i_532:
   155                           	callstack 0
   156                           
   157                           ; 1 bytes @ 0x2
   158  0000AD                     	ds	1
   159                           
   160                           	psect	cstackCOMRAM
   161  000001                     __pcstackCOMRAM:
   162                           	callstack 0
   163  000001                     ?___wmul:
   164                           	callstack 0
   165  000001                     ?___lwdiv:
   166                           	callstack 0
   167  000001                     ?___lwmod:
   168                           	callstack 0
   169  000001                     ___wmul@multiplier:
   170                           	callstack 0
   171  000001                     ___lwdiv@dividend:
   172                           	callstack 0
   173  000001                     ___lwmod@dividend:
   174                           	callstack 0
   175                           
   176                           ; 2 bytes @ 0x0
   177  000001                     	ds	2
   178  000003                     ___wmul@multiplicand:
   179                           	callstack 0
   180  000003                     ___lwdiv@divisor:
   181                           	callstack 0
   182  000003                     ___lwmod@divisor:
   183                           	callstack 0
   184                           
   185                           ; 2 bytes @ 0x2
   186  000003                     	ds	2
   187  000005                     ___lwmod@counter:
   188                           	callstack 0
   189  000005                     ___wmul@product:
   190                           	callstack 0
   191  000005                     ___lwdiv@quotient:
   192                           	callstack 0
   193                           
   194                           ; 2 bytes @ 0x4
   195  000005                     	ds	2
   196  000007                     ___lwdiv@counter:
   197                           	callstack 0
   198                           
   199                           ; 1 bytes @ 0x6
   200  000007                     	ds	1
   201  000008                     sev_seg_scan@sev_seg:
   202                           	callstack 0
   203                           
   204                           ; 2 bytes @ 0x7
   205  000008                     	ds	2
   206  00000A                     ??_sev_seg_scan:
   207                           
   208                           ; 1 bytes @ 0x9
   209  00000A                     	ds	11
   210  000015                     sev_seg_scan@is_special_char_enabled:
   211                           	callstack 0
   212                           
   213                           ; 1 bytes @ 0x14
   214  000015                     	ds	1
   215  000016                     sev_seg_scan@i_465:
   216                           	callstack 0
   217                           
   218                           ; 1 bytes @ 0x15
   219  000016                     	ds	1
   220  000017                     sev_seg_scan@j:
   221                           	callstack 0
   222                           
   223                           ; 1 bytes @ 0x16
   224  000017                     	ds	1
   225  000018                     sev_seg_scan@digit_val:
   226                           	callstack 0
   227                           
   228                           ; 1 bytes @ 0x17
   229  000018                     	ds	1
   230  000019                     sev_seg_scan@i_464:
   231                           	callstack 0
   232                           
   233                           ; 1 bytes @ 0x18
   234  000019                     	ds	1
   235  00001A                     sev_seg_scan@i:
   236                           	callstack 0
   237                           
   238                           ; 1 bytes @ 0x19
   239  00001A                     	ds	1
   240  00001B                     sev_seg_scan@i_459:
   241                           	callstack 0
   242                           
   243                           ; 1 bytes @ 0x1A
   244  00001B                     	ds	1
   245  00001C                     sev_seg_scan@i_463:
   246                           	callstack 0
   247                           
   248                           ; 1 bytes @ 0x1B
   249  00001C                     	ds	1
   250  00001D                     sev_seg_scan@i_466:
   251                           	callstack 0
   252                           
   253                           ; 1 bytes @ 0x1C
   254  00001D                     	ds	1
   255  00001E                     ??_ISR:
   256                           
   257                           ; 1 bytes @ 0x1D
   258  00001E                     	ds	10
   259  000028                     sev_seg_init@sev_seg:
   260                           	callstack 0
   261                           
   262                           ; 2 bytes @ 0x27
   263  000028                     	ds	2
   264  00002A                     ??_sev_seg_init:
   265                           
   266                           ; 1 bytes @ 0x29
   267  00002A                     	ds	9
   268  000033                     sev_seg_init@i:
   269                           	callstack 0
   270                           
   271                           ; 1 bytes @ 0x32
   272  000033                     	ds	1
   273  000034                     sev_seg_init@i_437:
   274                           	callstack 0
   275                           
   276                           ; 1 bytes @ 0x33
   277  000034                     	ds	1
   278  000035                     ??_main:
   279                           
   280                           ; 1 bytes @ 0x34
   281  000035                     	ds	2
   282                           
   283 ;;
   284 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   285 ;;
   286 ;; *************** function _main *****************
   287 ;; Defined at:
   288 ;;		line 158 in file "main.c"
   289 ;; Parameters:    Size  Location     Type
   290 ;;		None
   291 ;; Auto vars:     Size  Location     Type
   292 ;;  i               1    0[BANK0 ] unsigned char 
   293 ;;  i               1    2[BANK0 ] unsigned char 
   294 ;;  i               1    1[BANK0 ] unsigned char 
   295 ;; Return value:  Size  Location     Type
   296 ;;                  1    wreg      void 
   297 ;; Registers used:
   298 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   299 ;; Tracked objects:
   300 ;;		On entry : 0/0
   301 ;;		On exit  : 0/0
   302 ;;		Unchanged: 0/0
   303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   304 ;;      Params:         0       0       0       0       0       0       0
   305 ;;      Locals:         0       3       0       0       0       0       0
   306 ;;      Temps:          2       0       0       0       0       0       0
   307 ;;      Totals:         2       3       0       0       0       0       0
   308 ;;Total ram usage:        5 bytes
   309 ;; Hardware stack levels required when called: 4
   310 ;; This function calls:
   311 ;;		_sev_seg_init
   312 ;; This function is called by:
   313 ;;		Startup code after reset
   314 ;; This function uses a non-reentrant model
   315 ;;
   316                           
   317                           	psect	text0
   318  000D14                     __ptext0:
   319                           	callstack 0
   320  000D14                     _main:
   321                           	callstack 27
   322  000D14                     
   323                           ;main.c: 160:     OSCCONbits.IRCF = 0b111;
   324  000D14  0E70               	movlw	112
   325  000D16  12D3               	iorwf	211,f,c	;volatile
   326                           
   327                           ;main.c: 161:     OSCCONbits.SCS = 0b10;
   328  000D18  50D3               	movf	211,w,c	;volatile
   329  000D1A  0BFC               	andlw	-4
   330  000D1C  0902               	iorlw	2
   331  000D1E  6ED3               	movwf	211,c	;volatile
   332                           
   333                           ;main.c: 163:     ANSELA = 0x00;
   334  000D20  0E00               	movlw	0
   335  000D22  010F               	movlb	15	; () banked
   336  000D24  6F38               	movwf	56,b	;volatile
   337                           
   338                           ;main.c: 164:     ANSELB = 0x00;
   339  000D26  0E00               	movlw	0
   340  000D28  6F39               	movwf	57,b	;volatile
   341                           
   342                           ;main.c: 165:     ANSELC = 0x00;
   343  000D2A  0E00               	movlw	0
   344  000D2C  6F3A               	movwf	58,b	;volatile
   345                           
   346                           ;main.c: 166:     ANSELD = 0x00;
   347  000D2E  0E00               	movlw	0
   348  000D30  6F3B               	movwf	59,b	;volatile
   349                           
   350                           ;main.c: 167:     ANSELE = 0x00;
   351  000D32  0E00               	movlw	0
   352  000D34  6F3C               	movwf	60,b	;volatile
   353                           
   354                           ;main.c: 169:     WPUB = 0x00;
   355  000D36  0E00               	movlw	0
   356  000D38  6E61               	movwf	97,c	;volatile
   357  000D3A                     
   358                           ; BSR set to: 15
   359                           ;main.c: 173:     T1CONbits.T1CKPS1 = 0;
   360  000D3A  9ACD               	bcf	205,5,c	;volatile
   361  000D3C                     
   362                           ; BSR set to: 15
   363                           ;main.c: 174:     T1CONbits.T1CKPS0 = 0;
   364  000D3C  98CD               	bcf	205,4,c	;volatile
   365  000D3E                     
   366                           ; BSR set to: 15
   367                           ;main.c: 175:     T1CONbits.T1OSCEN = 1;
   368  000D3E  86CD               	bsf	205,3,c	;volatile
   369  000D40                     
   370                           ; BSR set to: 15
   371                           ;main.c: 176:     T1CONbits.T1SYNC = 1;
   372  000D40  84CD               	bsf	205,2,c	;volatile
   373                           
   374                           ;main.c: 177:     T1CONbits.TMR1CS = 0;
   375  000D42  0E3F               	movlw	-193
   376  000D44  16CD               	andwf	205,f,c	;volatile
   377  000D46                     
   378                           ; BSR set to: 15
   379                           ;main.c: 178:     T1CONbits.TMR1ON = 1;
   380  000D46  80CD               	bsf	205,0,c	;volatile
   381                           
   382                           ;main.c: 179:     TMR1H = 254;
   383  000D48  0EFE               	movlw	254
   384  000D4A  6ECF               	movwf	207,c	;volatile
   385                           
   386                           ;main.c: 180:     TMR1L = 112;
   387  000D4C  0E70               	movlw	112
   388  000D4E  6ECE               	movwf	206,c	;volatile
   389                           
   390                           ;main.c: 184:     INTCON = 0;
   391  000D50  0E00               	movlw	0
   392  000D52  6EF2               	movwf	242,c	;volatile
   393  000D54                     
   394                           ; BSR set to: 15
   395                           ;main.c: 185:     INTCONbits.TMR0IE = 0;
   396  000D54  9AF2               	bcf	242,5,c	;volatile
   397  000D56                     
   398                           ; BSR set to: 15
   399                           ;main.c: 186:     PIR1bits.TMR1IF = 0;
   400  000D56  909E               	bcf	158,0,c	;volatile
   401  000D58                     
   402                           ; BSR set to: 15
   403                           ;main.c: 187:     PIE1bits.TMR1IE = 1;
   404  000D58  809D               	bsf	157,0,c	;volatile
   405  000D5A                     
   406                           ; BSR set to: 15
   407                           ;main.c: 188:     INTCONbits.TMR0IF = 0;
   408  000D5A  94F2               	bcf	242,2,c	;volatile
   409  000D5C                     
   410                           ; BSR set to: 15
   411                           ;main.c: 189:     INTCONbits.GIE = 1;
   412  000D5C  8EF2               	bsf	242,7,c	;volatile
   413  000D5E                     
   414                           ; BSR set to: 15
   415                           ;main.c: 190:     INTCONbits.PEIE = 1;
   416  000D5E  8CF2               	bsf	242,6,c	;volatile
   417                           
   418                           ;main.c: 241:     for (uint8_t i = 0; i < 4; i++) {
   419  000D60  0E00               	movlw	0
   420  000D62  0100               	movlb	0	; () banked
   421  000D64  6FAC               	movwf	main@i& (0+255),b
   422  000D66                     l1254:
   423                           
   424                           ; BSR set to: 0
   425                           ;main.c: 242:         seven_segment.digit[i].port = &PORTB;
   426  000D66  51AC               	movf	main@i& (0+255),w,b
   427  000D68  0D05               	mullw	5
   428  000D6A  0E98               	movlw	low (_seven_segment+56)
   429  000D6C  24F3               	addwf	243,w,c
   430  000D6E  6ED9               	movwf	fsr2l,c
   431  000D70  0E00               	movlw	high (_seven_segment+56)
   432  000D72  20F4               	addwfc	prodh,w,c
   433  000D74  6EDA               	movwf	fsr2h,c
   434  000D76  0E81               	movlw	129
   435  000D78  6EDE               	movwf	postinc2,c
   436  000D7A  0E0F               	movlw	15
   437  000D7C  6EDD               	movwf	postdec2,c
   438                           
   439                           ;main.c: 243:         seven_segment.digit[i].dir = &TRISB;
   440  000D7E  51AC               	movf	main@i& (0+255),w,b
   441  000D80  0D05               	mullw	5
   442  000D82  0E96               	movlw	low (_seven_segment+54)
   443  000D84  24F3               	addwf	243,w,c
   444  000D86  6ED9               	movwf	fsr2l,c
   445  000D88  0E00               	movlw	high (_seven_segment+54)
   446  000D8A  20F4               	addwfc	prodh,w,c
   447  000D8C  6EDA               	movwf	fsr2h,c
   448  000D8E  0E93               	movlw	147
   449  000D90  6EDE               	movwf	postinc2,c
   450  000D92  0E0F               	movlw	15
   451  000D94  6EDD               	movwf	postdec2,c
   452                           
   453                           ;main.c: 244:         seven_segment.digit[i].pin = i;
   454  000D96  51AC               	movf	main@i& (0+255),w,b
   455  000D98  0D05               	mullw	5
   456  000D9A  0E9A               	movlw	low (_seven_segment+58)
   457  000D9C  24F3               	addwf	243,w,c
   458  000D9E  6ED9               	movwf	fsr2l,c
   459  000DA0  0E00               	movlw	high (_seven_segment+58)
   460  000DA2  20F4               	addwfc	prodh,w,c
   461  000DA4  6EDA               	movwf	fsr2h,c
   462  000DA6  C0AC  FFDF         	movff	main@i,indf2
   463  000DAA                     
   464                           ; BSR set to: 0
   465                           ;main.c: 245:     }
   466  000DAA  2BAC               	incf	main@i& (0+255),f,b
   467  000DAC                     
   468                           ; BSR set to: 0
   469  000DAC  0E03               	movlw	3
   470  000DAE  65AC               	cpfsgt	main@i& (0+255),b
   471  000DB0  EFDC  F006         	goto	u651
   472  000DB4  EFDE  F006         	goto	u650
   473  000DB8                     u651:
   474  000DB8  EFB3  F006         	goto	l1254
   475  000DBC                     u650:
   476  000DBC                     
   477                           ; BSR set to: 0
   478                           ;main.c: 247:     for (uint8_t i = 0; i < 8; i++) {
   479  000DBC  0E00               	movlw	0
   480  000DBE  6FAD               	movwf	main@i_532& (0+255),b
   481  000DC0                     l1266:
   482                           
   483                           ; BSR set to: 0
   484                           ;main.c: 248:         seven_segment.seg[i].port = &PORTD;
   485  000DC0  51AD               	movf	main@i_532& (0+255),w,b
   486  000DC2  0D05               	mullw	5
   487  000DC4  0E70               	movlw	low (_seven_segment+16)
   488  000DC6  24F3               	addwf	243,w,c
   489  000DC8  6ED9               	movwf	fsr2l,c
   490  000DCA  0E00               	movlw	high (_seven_segment+16)
   491  000DCC  20F4               	addwfc	prodh,w,c
   492  000DCE  6EDA               	movwf	fsr2h,c
   493  000DD0  0E83               	movlw	131
   494  000DD2  6EDE               	movwf	postinc2,c
   495  000DD4  0E0F               	movlw	15
   496  000DD6  6EDD               	movwf	postdec2,c
   497                           
   498                           ;main.c: 249:         seven_segment.seg[i].dir = &TRISD;
   499  000DD8  51AD               	movf	main@i_532& (0+255),w,b
   500  000DDA  0D05               	mullw	5
   501  000DDC  0E6E               	movlw	low (_seven_segment+14)
   502  000DDE  24F3               	addwf	243,w,c
   503  000DE0  6ED9               	movwf	fsr2l,c
   504  000DE2  0E00               	movlw	high (_seven_segment+14)
   505  000DE4  20F4               	addwfc	prodh,w,c
   506  000DE6  6EDA               	movwf	fsr2h,c
   507  000DE8  0E95               	movlw	149
   508  000DEA  6EDE               	movwf	postinc2,c
   509  000DEC  0E0F               	movlw	15
   510  000DEE  6EDD               	movwf	postdec2,c
   511                           
   512                           ;main.c: 250:         seven_segment.seg[i].pin = i;
   513  000DF0  51AD               	movf	main@i_532& (0+255),w,b
   514  000DF2  0D05               	mullw	5
   515  000DF4  0E72               	movlw	low (_seven_segment+18)
   516  000DF6  24F3               	addwf	243,w,c
   517  000DF8  6ED9               	movwf	fsr2l,c
   518  000DFA  0E00               	movlw	high (_seven_segment+18)
   519  000DFC  20F4               	addwfc	prodh,w,c
   520  000DFE  6EDA               	movwf	fsr2h,c
   521  000E00  C0AD  FFDF         	movff	main@i_532,indf2
   522  000E04                     
   523                           ; BSR set to: 0
   524                           ;main.c: 251:     }
   525  000E04  2BAD               	incf	main@i_532& (0+255),f,b
   526  000E06                     
   527                           ; BSR set to: 0
   528  000E06  0E07               	movlw	7
   529  000E08  65AD               	cpfsgt	main@i_532& (0+255),b
   530  000E0A  EF09  F007         	goto	u661
   531  000E0E  EF0B  F007         	goto	u660
   532  000E12                     u661:
   533  000E12  EFE0  F006         	goto	l1266
   534  000E16                     u660:
   535  000E16                     
   536                           ; BSR set to: 0
   537                           ;main.c: 253:     seven_segment.digit_delay_100us = 10;
   538  000E16  0E00               	movlw	0
   539  000E18  6F65               	movwf	(_seven_segment+5)& (0+255),b
   540  000E1A  0E0A               	movlw	10
   541  000E1C  6F64               	movwf	(_seven_segment+4)& (0+255),b
   542  000E1E                     
   543                           ; BSR set to: 0
   544                           ;main.c: 255:     sev_seg_init(&seven_segment);
   545  000E1E  0E60               	movlw	low _seven_segment
   546  000E20  6E28               	movwf	sev_seg_init@sev_seg^0,c
   547  000E22  0E00               	movlw	high _seven_segment
   548  000E24  6E29               	movwf	(sev_seg_init@sev_seg+1)^0,c
   549  000E26  EC92  F005         	call	_sev_seg_init	;wreg free
   550  000E2A                     
   551                           ;main.c: 257:     TRISBbits.TRISB4 = 1;
   552  000E2A  8893               	bsf	147,4,c	;volatile
   553  000E2C                     l1278:
   554                           
   555                           ;main.c: 260:         if (PORTBbits.RB4 == 0) {
   556  000E2C  B881               	btfsc	129,4,c	;volatile
   557  000E2E  EF1B  F007         	goto	u671
   558  000E32  EF1D  F007         	goto	u670
   559  000E36                     u671:
   560  000E36  EF28  F007         	goto	l1282
   561  000E3A                     u670:
   562  000E3A                     
   563                           ;main.c: 270:             seven_segment.special_char[3] = 0b1110111;
   564  000E3A  0E77               	movlw	119
   565  000E3C  0100               	movlb	0	; () banked
   566  000E3E  6F6D               	movwf	(_seven_segment+13)& (0+255),b
   567                           
   568                           ;main.c: 271:             seven_segment.special_char[2] = 0b0011111;
   569  000E40  0E1F               	movlw	31
   570  000E42  6F6C               	movwf	(_seven_segment+12)& (0+255),b
   571                           
   572                           ;main.c: 272:             seven_segment.special_char[1] = 0b1001110;
   573  000E44  0E4E               	movlw	78
   574  000E46  6F6B               	movwf	(_seven_segment+11)& (0+255),b
   575                           
   576                           ;main.c: 273:             seven_segment.special_char[0] = 0b0111101;
   577  000E48  0E3D               	movlw	61
   578  000E4A  6F6A               	movwf	(_seven_segment+10)& (0+255),b
   579                           
   580                           ;main.c: 274:         } else {
   581  000E4C  EF3E  F007         	goto	l1296
   582  000E50                     l1282:
   583                           
   584                           ;main.c: 275:             for (uint8_t i = 0; i < 4; i++) {
   585  000E50  0E00               	movlw	0
   586  000E52  0100               	movlb	0	; () banked
   587  000E54  6FAB               	movwf	main@i_553& (0+255),b
   588  000E56                     l1288:
   589                           
   590                           ; BSR set to: 0
   591                           ;main.c: 276:                 seven_segment.special_char[i] = 0;
   592  000E56  0E6A               	movlw	low (_seven_segment+10)
   593  000E58  25AB               	addwf	main@i_553& (0+255),w,b
   594  000E5A  6ED9               	movwf	fsr2l,c
   595  000E5C  6ADA               	clrf	fsr2h,c
   596  000E5E  0E00               	movlw	high (_seven_segment+10)
   597  000E60  22DA               	addwfc	fsr2h,f,c
   598  000E62  0E00               	movlw	0
   599  000E64  6EDF               	movwf	indf2,c
   600  000E66                     
   601                           ; BSR set to: 0
   602                           ;main.c: 277:             }
   603  000E66  2BAB               	incf	main@i_553& (0+255),f,b
   604  000E68                     
   605                           ; BSR set to: 0
   606  000E68  0E03               	movlw	3
   607  000E6A  65AB               	cpfsgt	main@i_553& (0+255),b
   608  000E6C  EF3A  F007         	goto	u681
   609  000E70  EF3C  F007         	goto	u680
   610  000E74                     u681:
   611  000E74  EF2B  F007         	goto	l1288
   612  000E78                     u680:
   613  000E78                     
   614                           ; BSR set to: 0
   615                           ;main.c: 278:             seven_segment.display_num++;
   616  000E78  4B60               	infsnz	_seven_segment& (0+255),f,b
   617  000E7A  2B61               	incf	(_seven_segment+1)& (0+255),f,b
   618  000E7C                     l1296:
   619                           
   620                           ; BSR set to: 0
   621                           ;main.c: 281:         _delay((unsigned long)((50)*(16000000/4000.0)));
   622  000E7C  0E02               	movlw	2
   623  000E7E  6E36               	movwf	(??_main+1)^0,c
   624  000E80  0E04               	movlw	4
   625  000E82  6E35               	movwf	??_main^0,c
   626  000E84  0EBA               	movlw	186
   627  000E86                     u697:
   628  000E86  2EE8               	decfsz	wreg,f,c
   629  000E88  D7FE               	bra	u697
   630  000E8A  2E35               	decfsz	??_main^0,f,c
   631  000E8C  D7FC               	bra	u697
   632  000E8E  2E36               	decfsz	(??_main+1)^0,f,c
   633  000E90  D7FA               	bra	u697
   634  000E92  D000               	nop2	
   635  000E94  EF16  F007         	goto	l1278
   636  000E98  EF42  F000         	goto	start
   637  000E9C                     __end_of_main:
   638                           	callstack 0
   639                           
   640 ;; *************** function _sev_seg_init *****************
   641 ;; Defined at:
   642 ;;		line 56 in file "main.c"
   643 ;; Parameters:    Size  Location     Type
   644 ;;  sev_seg         2   39[COMRAM] PTR struct .
   645 ;;		 -> seven_segment(75), 
   646 ;; Auto vars:     Size  Location     Type
   647 ;;  i               1   51[COMRAM] unsigned char 
   648 ;;  i               1   50[COMRAM] unsigned char 
   649 ;; Return value:  Size  Location     Type
   650 ;;                  1    wreg      void 
   651 ;; Registers used:
   652 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   653 ;; Tracked objects:
   654 ;;		On entry : 0/0
   655 ;;		On exit  : 0/0
   656 ;;		Unchanged: 0/0
   657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   658 ;;      Params:         2       0       0       0       0       0       0
   659 ;;      Locals:         2       0       0       0       0       0       0
   660 ;;      Temps:          9       0       0       0       0       0       0
   661 ;;      Totals:        13       0       0       0       0       0       0
   662 ;;Total ram usage:       13 bytes
   663 ;; Hardware stack levels used: 1
   664 ;; Hardware stack levels required when called: 3
   665 ;; This function calls:
   666 ;;		Nothing
   667 ;; This function is called by:
   668 ;;		_main
   669 ;; This function uses a non-reentrant model
   670 ;;
   671                           
   672                           	psect	text1
   673  000B24                     __ptext1:
   674                           	callstack 0
   675  000B24                     _sev_seg_init:
   676                           	callstack 27
   677  000B24                     
   678                           ;main.c: 58:     for (uint8_t i = 0; i < 4; i++) {
   679  000B24  0E00               	movlw	0
   680  000B26  6E33               	movwf	sev_seg_init@i^0,c
   681  000B28                     l1086:
   682                           
   683                           ;main.c: 59:         (*sev_seg->digit[i].dir) &= ~(1 << sev_seg->digit[i].pin);
   684  000B28  5033               	movf	sev_seg_init@i^0,w,c
   685  000B2A  0D05               	mullw	5
   686  000B2C  C028  F02A         	movff	sev_seg_init@sev_seg,??_sev_seg_init
   687  000B30  C029  F02B         	movff	sev_seg_init@sev_seg+1,??_sev_seg_init+1
   688  000B34  50F3               	movf	243,w,c
   689  000B36  262A               	addwf	??_sev_seg_init^0,f,c
   690  000B38  50F4               	movf	244,w,c
   691  000B3A  222B               	addwfc	(??_sev_seg_init+1)^0,f,c
   692  000B3C  0E3A               	movlw	58
   693  000B3E  242A               	addwf	??_sev_seg_init^0,w,c
   694  000B40  6ED9               	movwf	fsr2l,c
   695  000B42  0E00               	movlw	0
   696  000B44  202B               	addwfc	(??_sev_seg_init+1)^0,w,c
   697  000B46  6EDA               	movwf	fsr2h,c
   698  000B48  50DF               	movf	indf2,w,c
   699  000B4A  6E2C               	movwf	(??_sev_seg_init+2)^0,c
   700  000B4C  0E01               	movlw	1
   701  000B4E  6E2D               	movwf	(??_sev_seg_init+3)^0,c
   702  000B50  2A2C               	incf	(??_sev_seg_init+2)^0,f,c
   703  000B52  EFAD  F005         	goto	u414
   704  000B56                     u415:
   705  000B56  90D8               	bcf	status,0,c
   706  000B58  362D               	rlcf	(??_sev_seg_init+3)^0,f,c
   707  000B5A                     u414:
   708  000B5A  2E2C               	decfsz	(??_sev_seg_init+2)^0,f,c
   709  000B5C  EFAB  F005         	goto	u415
   710  000B60  502D               	movf	(??_sev_seg_init+3)^0,w,c
   711  000B62  0AFF               	xorlw	255
   712  000B64  6E2E               	movwf	(??_sev_seg_init+4)^0,c
   713  000B66  5033               	movf	sev_seg_init@i^0,w,c
   714  000B68  0D05               	mullw	5
   715  000B6A  C028  F02F         	movff	sev_seg_init@sev_seg,??_sev_seg_init+5
   716  000B6E  C029  F030         	movff	sev_seg_init@sev_seg+1,??_sev_seg_init+6
   717  000B72  50F3               	movf	243,w,c
   718  000B74  262F               	addwf	(??_sev_seg_init+5)^0,f,c
   719  000B76  50F4               	movf	244,w,c
   720  000B78  2230               	addwfc	(??_sev_seg_init+6)^0,f,c
   721  000B7A  0E36               	movlw	54
   722  000B7C  242F               	addwf	(??_sev_seg_init+5)^0,w,c
   723  000B7E  6ED9               	movwf	fsr2l,c
   724  000B80  0E00               	movlw	0
   725  000B82  2030               	addwfc	(??_sev_seg_init+6)^0,w,c
   726  000B84  6EDA               	movwf	fsr2h,c
   727  000B86  CFDE F031          	movff	postinc2,??_sev_seg_init+7
   728  000B8A  CFDD F032          	movff	postdec2,??_sev_seg_init+8
   729  000B8E  C031  FFD9         	movff	??_sev_seg_init+7,fsr2l
   730  000B92  C032  FFDA         	movff	??_sev_seg_init+8,fsr2h
   731  000B96  502E               	movf	(??_sev_seg_init+4)^0,w,c
   732  000B98  16DF               	andwf	indf2,f,c
   733                           
   734                           ;main.c: 60:         (*sev_seg->digit[i].port) |= (1 << sev_seg->digit[i].pin);
   735  000B9A  5033               	movf	sev_seg_init@i^0,w,c
   736  000B9C  0D05               	mullw	5
   737  000B9E  C028  F02A         	movff	sev_seg_init@sev_seg,??_sev_seg_init
   738  000BA2  C029  F02B         	movff	sev_seg_init@sev_seg+1,??_sev_seg_init+1
   739  000BA6  50F3               	movf	243,w,c
   740  000BA8  262A               	addwf	??_sev_seg_init^0,f,c
   741  000BAA  50F4               	movf	244,w,c
   742  000BAC  222B               	addwfc	(??_sev_seg_init+1)^0,f,c
   743  000BAE  0E3A               	movlw	58
   744  000BB0  242A               	addwf	??_sev_seg_init^0,w,c
   745  000BB2  6ED9               	movwf	fsr2l,c
   746  000BB4  0E00               	movlw	0
   747  000BB6  202B               	addwfc	(??_sev_seg_init+1)^0,w,c
   748  000BB8  6EDA               	movwf	fsr2h,c
   749  000BBA  50DF               	movf	indf2,w,c
   750  000BBC  6E2C               	movwf	(??_sev_seg_init+2)^0,c
   751  000BBE  0E01               	movlw	1
   752  000BC0  6E2D               	movwf	(??_sev_seg_init+3)^0,c
   753  000BC2  2A2C               	incf	(??_sev_seg_init+2)^0,f,c
   754  000BC4  EFE6  F005         	goto	u424
   755  000BC8                     u425:
   756  000BC8  90D8               	bcf	status,0,c
   757  000BCA  362D               	rlcf	(??_sev_seg_init+3)^0,f,c
   758  000BCC                     u424:
   759  000BCC  2E2C               	decfsz	(??_sev_seg_init+2)^0,f,c
   760  000BCE  EFE4  F005         	goto	u425
   761  000BD2  5033               	movf	sev_seg_init@i^0,w,c
   762  000BD4  0D05               	mullw	5
   763  000BD6  C028  F02E         	movff	sev_seg_init@sev_seg,??_sev_seg_init+4
   764  000BDA  C029  F02F         	movff	sev_seg_init@sev_seg+1,??_sev_seg_init+5
   765  000BDE  50F3               	movf	243,w,c
   766  000BE0  262E               	addwf	(??_sev_seg_init+4)^0,f,c
   767  000BE2  50F4               	movf	244,w,c
   768  000BE4  222F               	addwfc	(??_sev_seg_init+5)^0,f,c
   769  000BE6  0E38               	movlw	56
   770  000BE8  242E               	addwf	(??_sev_seg_init+4)^0,w,c
   771  000BEA  6ED9               	movwf	fsr2l,c
   772  000BEC  0E00               	movlw	0
   773  000BEE  202F               	addwfc	(??_sev_seg_init+5)^0,w,c
   774  000BF0  6EDA               	movwf	fsr2h,c
   775  000BF2  CFDE F030          	movff	postinc2,??_sev_seg_init+6
   776  000BF6  CFDD F031          	movff	postdec2,??_sev_seg_init+7
   777  000BFA  C030  FFD9         	movff	??_sev_seg_init+6,fsr2l
   778  000BFE  C031  FFDA         	movff	??_sev_seg_init+7,fsr2h
   779  000C02  502D               	movf	(??_sev_seg_init+3)^0,w,c
   780  000C04  12DF               	iorwf	indf2,f,c
   781  000C06                     
   782                           ;main.c: 61:     }
   783  000C06  2A33               	incf	sev_seg_init@i^0,f,c
   784  000C08  0E03               	movlw	3
   785  000C0A  6433               	cpfsgt	sev_seg_init@i^0,c
   786  000C0C  EF0A  F006         	goto	u431
   787  000C10  EF0C  F006         	goto	u430
   788  000C14                     u431:
   789  000C14  EF94  F005         	goto	l1086
   790  000C18                     u430:
   791  000C18                     
   792                           ;main.c: 64:     for (uint8_t i = 0; i < 8; i++) {
   793  000C18  0E00               	movlw	0
   794  000C1A  6E34               	movwf	sev_seg_init@i_437^0,c
   795  000C1C                     l1098:
   796                           
   797                           ;main.c: 65:         (*sev_seg->seg[i].dir) &= ~(1 << sev_seg->seg[i].pin);
   798  000C1C  5034               	movf	sev_seg_init@i_437^0,w,c
   799  000C1E  0D05               	mullw	5
   800  000C20  C028  F02A         	movff	sev_seg_init@sev_seg,??_sev_seg_init
   801  000C24  C029  F02B         	movff	sev_seg_init@sev_seg+1,??_sev_seg_init+1
   802  000C28  50F3               	movf	243,w,c
   803  000C2A  262A               	addwf	??_sev_seg_init^0,f,c
   804  000C2C  50F4               	movf	244,w,c
   805  000C2E  222B               	addwfc	(??_sev_seg_init+1)^0,f,c
   806  000C30  0E12               	movlw	18
   807  000C32  242A               	addwf	??_sev_seg_init^0,w,c
   808  000C34  6ED9               	movwf	fsr2l,c
   809  000C36  0E00               	movlw	0
   810  000C38  202B               	addwfc	(??_sev_seg_init+1)^0,w,c
   811  000C3A  6EDA               	movwf	fsr2h,c
   812  000C3C  50DF               	movf	indf2,w,c
   813  000C3E  6E2C               	movwf	(??_sev_seg_init+2)^0,c
   814  000C40  0E01               	movlw	1
   815  000C42  6E2D               	movwf	(??_sev_seg_init+3)^0,c
   816  000C44  2A2C               	incf	(??_sev_seg_init+2)^0,f,c
   817  000C46  EF27  F006         	goto	u444
   818  000C4A                     u445:
   819  000C4A  90D8               	bcf	status,0,c
   820  000C4C  362D               	rlcf	(??_sev_seg_init+3)^0,f,c
   821  000C4E                     u444:
   822  000C4E  2E2C               	decfsz	(??_sev_seg_init+2)^0,f,c
   823  000C50  EF25  F006         	goto	u445
   824  000C54  502D               	movf	(??_sev_seg_init+3)^0,w,c
   825  000C56  0AFF               	xorlw	255
   826  000C58  6E2E               	movwf	(??_sev_seg_init+4)^0,c
   827  000C5A  5034               	movf	sev_seg_init@i_437^0,w,c
   828  000C5C  0D05               	mullw	5
   829  000C5E  C028  F02F         	movff	sev_seg_init@sev_seg,??_sev_seg_init+5
   830  000C62  C029  F030         	movff	sev_seg_init@sev_seg+1,??_sev_seg_init+6
   831  000C66  50F3               	movf	243,w,c
   832  000C68  262F               	addwf	(??_sev_seg_init+5)^0,f,c
   833  000C6A  50F4               	movf	244,w,c
   834  000C6C  2230               	addwfc	(??_sev_seg_init+6)^0,f,c
   835  000C6E  0E0E               	movlw	14
   836  000C70  242F               	addwf	(??_sev_seg_init+5)^0,w,c
   837  000C72  6ED9               	movwf	fsr2l,c
   838  000C74  0E00               	movlw	0
   839  000C76  2030               	addwfc	(??_sev_seg_init+6)^0,w,c
   840  000C78  6EDA               	movwf	fsr2h,c
   841  000C7A  CFDE F031          	movff	postinc2,??_sev_seg_init+7
   842  000C7E  CFDD F032          	movff	postdec2,??_sev_seg_init+8
   843  000C82  C031  FFD9         	movff	??_sev_seg_init+7,fsr2l
   844  000C86  C032  FFDA         	movff	??_sev_seg_init+8,fsr2h
   845  000C8A  502E               	movf	(??_sev_seg_init+4)^0,w,c
   846  000C8C  16DF               	andwf	indf2,f,c
   847                           
   848                           ;main.c: 66:         (*sev_seg->seg[i].port) &= ~(1 << sev_seg->seg[i].pin);
   849  000C8E  5034               	movf	sev_seg_init@i_437^0,w,c
   850  000C90  0D05               	mullw	5
   851  000C92  C028  F02A         	movff	sev_seg_init@sev_seg,??_sev_seg_init
   852  000C96  C029  F02B         	movff	sev_seg_init@sev_seg+1,??_sev_seg_init+1
   853  000C9A  50F3               	movf	243,w,c
   854  000C9C  262A               	addwf	??_sev_seg_init^0,f,c
   855  000C9E  50F4               	movf	244,w,c
   856  000CA0  222B               	addwfc	(??_sev_seg_init+1)^0,f,c
   857  000CA2  0E12               	movlw	18
   858  000CA4  242A               	addwf	??_sev_seg_init^0,w,c
   859  000CA6  6ED9               	movwf	fsr2l,c
   860  000CA8  0E00               	movlw	0
   861  000CAA  202B               	addwfc	(??_sev_seg_init+1)^0,w,c
   862  000CAC  6EDA               	movwf	fsr2h,c
   863  000CAE  50DF               	movf	indf2,w,c
   864  000CB0  6E2C               	movwf	(??_sev_seg_init+2)^0,c
   865  000CB2  0E01               	movlw	1
   866  000CB4  6E2D               	movwf	(??_sev_seg_init+3)^0,c
   867  000CB6  2A2C               	incf	(??_sev_seg_init+2)^0,f,c
   868  000CB8  EF60  F006         	goto	u454
   869  000CBC                     u455:
   870  000CBC  90D8               	bcf	status,0,c
   871  000CBE  362D               	rlcf	(??_sev_seg_init+3)^0,f,c
   872  000CC0                     u454:
   873  000CC0  2E2C               	decfsz	(??_sev_seg_init+2)^0,f,c
   874  000CC2  EF5E  F006         	goto	u455
   875  000CC6  502D               	movf	(??_sev_seg_init+3)^0,w,c
   876  000CC8  0AFF               	xorlw	255
   877  000CCA  6E2E               	movwf	(??_sev_seg_init+4)^0,c
   878  000CCC  5034               	movf	sev_seg_init@i_437^0,w,c
   879  000CCE  0D05               	mullw	5
   880  000CD0  C028  F02F         	movff	sev_seg_init@sev_seg,??_sev_seg_init+5
   881  000CD4  C029  F030         	movff	sev_seg_init@sev_seg+1,??_sev_seg_init+6
   882  000CD8  50F3               	movf	243,w,c
   883  000CDA  262F               	addwf	(??_sev_seg_init+5)^0,f,c
   884  000CDC  50F4               	movf	244,w,c
   885  000CDE  2230               	addwfc	(??_sev_seg_init+6)^0,f,c
   886  000CE0  0E10               	movlw	16
   887  000CE2  242F               	addwf	(??_sev_seg_init+5)^0,w,c
   888  000CE4  6ED9               	movwf	fsr2l,c
   889  000CE6  0E00               	movlw	0
   890  000CE8  2030               	addwfc	(??_sev_seg_init+6)^0,w,c
   891  000CEA  6EDA               	movwf	fsr2h,c
   892  000CEC  CFDE F031          	movff	postinc2,??_sev_seg_init+7
   893  000CF0  CFDD F032          	movff	postdec2,??_sev_seg_init+8
   894  000CF4  C031  FFD9         	movff	??_sev_seg_init+7,fsr2l
   895  000CF8  C032  FFDA         	movff	??_sev_seg_init+8,fsr2h
   896  000CFC  502E               	movf	(??_sev_seg_init+4)^0,w,c
   897  000CFE  16DF               	andwf	indf2,f,c
   898  000D00                     
   899                           ;main.c: 67:     }
   900  000D00  2A34               	incf	sev_seg_init@i_437^0,f,c
   901  000D02  0E07               	movlw	7
   902  000D04  6434               	cpfsgt	sev_seg_init@i_437^0,c
   903  000D06  EF87  F006         	goto	u461
   904  000D0A  EF89  F006         	goto	u460
   905  000D0E                     u461:
   906  000D0E  EF0E  F006         	goto	l1098
   907  000D12                     u460:
   908  000D12  0012               	return		;funcret
   909  000D14                     __end_of_sev_seg_init:
   910                           	callstack 0
   911                           
   912 ;; *************** function _ISR *****************
   913 ;; Defined at:
   914 ;;		line 145 in file "main.c"
   915 ;; Parameters:    Size  Location     Type
   916 ;;		None
   917 ;; Auto vars:     Size  Location     Type
   918 ;;		None
   919 ;; Return value:  Size  Location     Type
   920 ;;                  1    wreg      void 
   921 ;; Registers used:
   922 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   923 ;; Tracked objects:
   924 ;;		On entry : 0/0
   925 ;;		On exit  : 0/0
   926 ;;		Unchanged: 0/0
   927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   928 ;;      Params:         0       0       0       0       0       0       0
   929 ;;      Locals:         0       0       0       0       0       0       0
   930 ;;      Temps:         10       0       0       0       0       0       0
   931 ;;      Totals:        10       0       0       0       0       0       0
   932 ;;Total ram usage:       10 bytes
   933 ;; Hardware stack levels used: 1
   934 ;; Hardware stack levels required when called: 2
   935 ;; This function calls:
   936 ;;		_sev_seg_scan
   937 ;; This function is called by:
   938 ;;		Interrupt level 2
   939 ;; This function uses a non-reentrant model
   940 ;;
   941                           
   942                           	psect	intcode
   943  000008                     __pintcode:
   944                           	callstack 0
   945  000008                     _ISR:
   946                           	callstack 27
   947                           
   948                           ;incstack = 0
   949  000008  8237               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
   950  00000A  CFE1 F01E          	movff	fsr1l,??_ISR
   951  00000E  CFE2 F01F          	movff	fsr1h,??_ISR+1
   952  000012  CFD9 F020          	movff	fsr2l,??_ISR+2
   953  000016  CFDA F021          	movff	fsr2h,??_ISR+3
   954  00001A  CFF3 F022          	movff	prodl,??_ISR+4
   955  00001E  CFF4 F023          	movff	prodh,??_ISR+5
   956  000022  CFF6 F024          	movff	tblptrl,??_ISR+6
   957  000026  CFF7 F025          	movff	tblptrh,??_ISR+7
   958  00002A  CFF8 F026          	movff	tblptru,??_ISR+8
   959  00002E  CFF5 F027          	movff	tablat,??_ISR+9
   960  000032                     
   961                           ;main.c: 147:     if (PIR1bits.TMR1IF == 1) {
   962  000032  A09E               	btfss	158,0,c	;volatile
   963  000034  EF1E  F000         	goto	i2u64_41
   964  000038  EF20  F000         	goto	i2u64_40
   965  00003C                     i2u64_41:
   966  00003C  EF2C  F000         	goto	i2l82
   967  000040                     i2u64_40:
   968  000040                     
   969                           ;main.c: 149:         sev_seg_scan(&seven_segment);
   970  000040  0E60               	movlw	low _seven_segment
   971  000042  6E08               	movwf	sev_seg_scan@sev_seg^0,c
   972  000044  0E00               	movlw	high _seven_segment
   973  000046  6E09               	movwf	(sev_seg_scan@sev_seg+1)^0,c
   974  000048  EC09  F003         	call	_sev_seg_scan	;wreg free
   975  00004C                     
   976                           ;main.c: 151:         PIR1bits.TMR1IF = 0;
   977  00004C  909E               	bcf	158,0,c	;volatile
   978  00004E                     
   979                           ;main.c: 152:         PIE1bits.TMR1IE = 1;
   980  00004E  809D               	bsf	157,0,c	;volatile
   981  000050                     
   982                           ;main.c: 153:         TMR1H = 254;
   983  000050  0EFE               	movlw	254
   984  000052  6ECF               	movwf	207,c	;volatile
   985  000054                     
   986                           ;main.c: 154:         TMR1L = 112;
   987  000054  0E70               	movlw	112
   988  000056  6ECE               	movwf	206,c	;volatile
   989  000058                     i2l82:
   990  000058  C027  FFF5         	movff	??_ISR+9,tablat
   991  00005C  C026  FFF8         	movff	??_ISR+8,tblptru
   992  000060  C025  FFF7         	movff	??_ISR+7,tblptrh
   993  000064  C024  FFF6         	movff	??_ISR+6,tblptrl
   994  000068  C023  FFF4         	movff	??_ISR+5,prodh
   995  00006C  C022  FFF3         	movff	??_ISR+4,prodl
   996  000070  C021  FFDA         	movff	??_ISR+3,fsr2h
   997  000074  C020  FFD9         	movff	??_ISR+2,fsr2l
   998  000078  C01F  FFE2         	movff	??_ISR+1,fsr1h
   999  00007C  C01E  FFE1         	movff	??_ISR,fsr1l
  1000  000080  9237               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1001  000082  0011               	retfie		f
  1002  000084                     __end_of_ISR:
  1003                           	callstack 0
  1004                           
  1005 ;; *************** function _sev_seg_scan *****************
  1006 ;; Defined at:
  1007 ;;		line 70 in file "main.c"
  1008 ;; Parameters:    Size  Location     Type
  1009 ;;  sev_seg         2    7[COMRAM] PTR struct .
  1010 ;;		 -> seven_segment(75), 
  1011 ;; Auto vars:     Size  Location     Type
  1012 ;;  i               1   21[COMRAM] unsigned char 
  1013 ;;  i               1   25[COMRAM] unsigned char 
  1014 ;;  i               1   28[COMRAM] unsigned char 
  1015 ;;  j               1   22[COMRAM] unsigned char 
  1016 ;;  i               1   24[COMRAM] unsigned char 
  1017 ;;  i               1   27[COMRAM] unsigned char 
  1018 ;;  i               1   26[COMRAM] unsigned char 
  1019 ;;  digit_val       1   23[COMRAM] unsigned char 
  1020 ;;  is_special_c    1   20[COMRAM] unsigned char 
  1021 ;; Return value:  Size  Location     Type
  1022 ;;                  1    wreg      void 
  1023 ;; Registers used:
  1024 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1025 ;; Tracked objects:
  1026 ;;		On entry : 0/0
  1027 ;;		On exit  : 0/0
  1028 ;;		Unchanged: 0/0
  1029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1030 ;;      Params:         2       0       0       0       0       0       0
  1031 ;;      Locals:         9       0       0       0       0       0       0
  1032 ;;      Temps:         11       0       0       0       0       0       0
  1033 ;;      Totals:        22       0       0       0       0       0       0
  1034 ;;Total ram usage:       22 bytes
  1035 ;; Hardware stack levels used: 1
  1036 ;; Hardware stack levels required when called: 1
  1037 ;; This function calls:
  1038 ;;		___lwdiv
  1039 ;;		___lwmod
  1040 ;;		___wmul
  1041 ;; This function is called by:
  1042 ;;		_ISR
  1043 ;; This function uses a non-reentrant model
  1044 ;;
  1045                           
  1046                           	psect	text3
  1047  000612                     __ptext3:
  1048                           	callstack 0
  1049  000612                     _sev_seg_scan:
  1050                           	callstack 27
  1051  000612  0E00               	movlw	0
  1052  000614  6E15               	movwf	sev_seg_scan@is_special_char_enabled^0,c
  1053  000616                     
  1054                           ;main.c: 74:     sev_seg->current_delay_100us++;
  1055  000616  EE20 F006          	lfsr	2,6
  1056  00061A  5008               	movf	sev_seg_scan@sev_seg^0,w,c
  1057  00061C  26D9               	addwf	fsr2l,f,c
  1058  00061E  5009               	movf	(sev_seg_scan@sev_seg+1)^0,w,c
  1059  000620  22DA               	addwfc	fsr2h,f,c
  1060  000622  2ADE               	incf	postinc2,f,c
  1061  000624  0E00               	movlw	0
  1062  000626  22DD               	addwfc	postdec2,f,c
  1063  000628                     
  1064                           ;main.c: 75:     if (sev_seg->current_delay_100us < sev_seg->digit_delay_100us) {
  1065  000628  EE20 F004          	lfsr	2,4
  1066  00062C  5008               	movf	sev_seg_scan@sev_seg^0,w,c
  1067  00062E  26D9               	addwf	fsr2l,f,c
  1068  000630  5009               	movf	(sev_seg_scan@sev_seg+1)^0,w,c
  1069  000632  22DA               	addwfc	fsr2h,f,c
  1070  000634  EE10 F006          	lfsr	1,6
  1071  000638  5008               	movf	sev_seg_scan@sev_seg^0,w,c
  1072  00063A  26E1               	addwf	fsr1l,f,c
  1073  00063C  5009               	movf	(sev_seg_scan@sev_seg+1)^0,w,c
  1074  00063E  22E2               	addwfc	fsr1h,f,c
  1075  000640  50DE               	movf	postinc2,w,c
  1076  000642  5CE6               	subwf	postinc1,w,c
  1077  000644  50DE               	movf	postinc2,w,c
  1078  000646  58E6               	subwfb	postinc1,w,c
  1079  000648  B0D8               	btfsc	status,0,c
  1080  00064A  EF29  F003         	goto	i2u47_41
  1081  00064E  EF2B  F003         	goto	i2u47_40
  1082  000652                     i2u47_41:
  1083  000652  EF2D  F003         	goto	i2l1112
  1084  000656                     i2u47_40:
  1085  000656  EF91  F005         	goto	i2l57
  1086  00065A                     i2l1112:
  1087                           
  1088                           ;main.c: 80:     if (sev_seg->state == 0) {
  1089  00065A  EE20 F04A          	lfsr	2,74
  1090  00065E  5008               	movf	sev_seg_scan@sev_seg^0,w,c
  1091  000660  26D9               	addwf	fsr2l,f,c
  1092  000662  5009               	movf	(sev_seg_scan@sev_seg+1)^0,w,c
  1093  000664  22DA               	addwfc	fsr2h,f,c
  1094  000666  50DF               	movf	indf2,w,c
  1095  000668  A4D8               	btfss	status,2,c
  1096  00066A  EF39  F003         	goto	i2u48_41
  1097  00066E  EF3B  F003         	goto	i2u48_40
  1098  000672                     i2u48_41:
  1099  000672  EF90  F003         	goto	i2l1132
  1100  000676                     i2u48_40:
  1101  000676                     
  1102                           ;main.c: 81:         sev_seg->state = 1;
  1103  000676  EE20 F04A          	lfsr	2,74
  1104  00067A  5008               	movf	sev_seg_scan@sev_seg^0,w,c
  1105  00067C  26D9               	addwf	fsr2l,f,c
  1106  00067E  5009               	movf	(sev_seg_scan@sev_seg+1)^0,w,c
  1107  000680  22DA               	addwfc	fsr2h,f,c
  1108  000682  0E01               	movlw	1
  1109  000684  6EDF               	movwf	indf2,c
  1110  000686                     
  1111                           ;main.c: 83:         for (uint8_t i = 0; i < 8; i++) {
  1112  000686  0E00               	movlw	0
  1113  000688  6E1A               	movwf	sev_seg_scan@i^0,c
  1114  00068A                     i2l1122:
  1115                           
  1116                           ;main.c: 84:             (*sev_seg->seg[i].port) |= (1 << sev_seg->seg[i].pin);
  1117  00068A  501A               	movf	sev_seg_scan@i^0,w,c
  1118  00068C  0D05               	mullw	5
  1119  00068E  C008  F00A         	movff	sev_seg_scan@sev_seg,??_sev_seg_scan
  1120  000692  C009  F00B         	movff	sev_seg_scan@sev_seg+1,??_sev_seg_scan+1
  1121  000696  50F3               	movf	243,w,c
  1122  000698  260A               	addwf	??_sev_seg_scan^0,f,c
  1123  00069A  50F4               	movf	244,w,c
  1124  00069C  220B               	addwfc	(??_sev_seg_scan+1)^0,f,c
  1125  00069E  0E12               	movlw	18
  1126  0006A0  240A               	addwf	??_sev_seg_scan^0,w,c
  1127  0006A2  6ED9               	movwf	fsr2l,c
  1128  0006A4  0E00               	movlw	0
  1129  0006A6  200B               	addwfc	(??_sev_seg_scan+1)^0,w,c
  1130  0006A8  6EDA               	movwf	fsr2h,c
  1131  0006AA  50DF               	movf	indf2,w,c
  1132  0006AC  6E0C               	movwf	(??_sev_seg_scan+2)^0,c
  1133  0006AE  0E01               	movlw	1
  1134  0006B0  6E0D               	movwf	(??_sev_seg_scan+3)^0,c
  1135  0006B2  2A0C               	incf	(??_sev_seg_scan+2)^0,f,c
  1136  0006B4  EF5E  F003         	goto	i2u49_44
  1137  0006B8                     i2u49_45:
  1138  0006B8  90D8               	bcf	status,0,c
  1139  0006BA  360D               	rlcf	(??_sev_seg_scan+3)^0,f,c
  1140  0006BC                     i2u49_44:
  1141  0006BC  2E0C               	decfsz	(??_sev_seg_scan+2)^0,f,c
  1142  0006BE  EF5C  F003         	goto	i2u49_45
  1143  0006C2  501A               	movf	sev_seg_scan@i^0,w,c
  1144  0006C4  0D05               	mullw	5
  1145  0006C6  C008  F00E         	movff	sev_seg_scan@sev_seg,??_sev_seg_scan+4
  1146  0006CA  C009  F00F         	movff	sev_seg_scan@sev_seg+1,??_sev_seg_scan+5
  1147  0006CE  50F3               	movf	243,w,c
  1148  0006D0  260E               	addwf	(??_sev_seg_scan+4)^0,f,c
  1149  0006D2  50F4               	movf	244,w,c
  1150  0006D4  220F               	addwfc	(??_sev_seg_scan+5)^0,f,c
  1151  0006D6  0E10               	movlw	16
  1152  0006D8  240E               	addwf	(??_sev_seg_scan+4)^0,w,c
  1153  0006DA  6ED9               	movwf	fsr2l,c
  1154  0006DC  0E00               	movlw	0
  1155  0006DE  200F               	addwfc	(??_sev_seg_scan+5)^0,w,c
  1156  0006E0  6EDA               	movwf	fsr2h,c
  1157  0006E2  CFDE F010          	movff	postinc2,??_sev_seg_scan+6
  1158  0006E6  CFDD F011          	movff	postdec2,??_sev_seg_scan+7
  1159  0006EA  C010  FFD9         	movff	??_sev_seg_scan+6,fsr2l
  1160  0006EE  C011  FFDA         	movff	??_sev_seg_scan+7,fsr2h
  1161  0006F2  500D               	movf	(??_sev_seg_scan+3)^0,w,c
  1162  0006F4  12DF               	iorwf	indf2,f,c
  1163  0006F6                     
  1164                           ;main.c: 85:         }
  1165  0006F6  2A1A               	incf	sev_seg_scan@i^0,f,c
  1166  0006F8  0E07               	movlw	7
  1167  0006FA  641A               	cpfsgt	sev_seg_scan@i^0,c
  1168  0006FC  EF82  F003         	goto	i2u50_41
  1169  000700  EF84  F003         	goto	i2u50_40
  1170  000704                     i2u50_41:
  1171  000704  EF45  F003         	goto	i2l1122
  1172  000708                     i2u50_40:
  1173  000708                     
  1174                           ;main.c: 87:         sev_seg->current_delay_100us = 0;
  1175  000708  EE20 F006          	lfsr	2,6
  1176  00070C  5008               	movf	sev_seg_scan@sev_seg^0,w,c
  1177  00070E  26D9               	addwf	fsr2l,f,c
  1178  000710  5009               	movf	(sev_seg_scan@sev_seg+1)^0,w,c
  1179  000712  22DA               	addwfc	fsr2h,f,c
  1180  000714  0E00               	movlw	0
  1181  000716  6EDE               	movwf	postinc2,c
  1182  000718  0E00               	movlw	0
  1183  00071A  6EDD               	movwf	postdec2,c
  1184  00071C  EF91  F005         	goto	i2l57
  1185  000720                     i2l1132:
  1186                           
  1187                           ;main.c: 91:     sev_seg->state = 0;
  1188  000720  EE20 F04A          	lfsr	2,74
  1189  000724  5008               	movf	sev_seg_scan@sev_seg^0,w,c
  1190  000726  26D9               	addwf	fsr2l,f,c
  1191  000728  5009               	movf	(sev_seg_scan@sev_seg+1)^0,w,c
  1192  00072A  22DA               	addwfc	fsr2h,f,c
  1193  00072C  0E00               	movlw	0
  1194  00072E  6EDF               	movwf	indf2,c
  1195                           
  1196                           ;main.c: 93:     sev_seg->current_delay_100us = 0;
  1197  000730  EE20 F006          	lfsr	2,6
  1198  000734  5008               	movf	sev_seg_scan@sev_seg^0,w,c
  1199  000736  26D9               	addwf	fsr2l,f,c
  1200  000738  5009               	movf	(sev_seg_scan@sev_seg+1)^0,w,c
  1201  00073A  22DA               	addwfc	fsr2h,f,c
  1202  00073C  0E00               	movlw	0
  1203  00073E  6EDE               	movwf	postinc2,c
  1204  000740  0E00               	movlw	0
  1205  000742  6EDD               	movwf	postdec2,c
  1206  000744                     
  1207                           ;main.c: 96:     for (uint8_t i = 0; i < 4; i++) {
  1208  000744  0E00               	movlw	0
  1209  000746  6E1B               	movwf	sev_seg_scan@i_459^0,c
  1210  000748                     i2l1140:
  1211                           
  1212                           ;main.c: 97:         (*sev_seg->digit[i].port) |= (1 << sev_seg->digit[i].pin);
  1213  000748  501B               	movf	sev_seg_scan@i_459^0,w,c
  1214  00074A  0D05               	mullw	5
  1215  00074C  C008  F00A         	movff	sev_seg_scan@sev_seg,??_sev_seg_scan
  1216  000750  C009  F00B         	movff	sev_seg_scan@sev_seg+1,??_sev_seg_scan+1
  1217  000754  50F3               	movf	243,w,c
  1218  000756  260A               	addwf	??_sev_seg_scan^0,f,c
  1219  000758  50F4               	movf	244,w,c
  1220  00075A  220B               	addwfc	(??_sev_seg_scan+1)^0,f,c
  1221  00075C  0E3A               	movlw	58
  1222  00075E  240A               	addwf	??_sev_seg_scan^0,w,c
  1223  000760  6ED9               	movwf	fsr2l,c
  1224  000762  0E00               	movlw	0
  1225  000764  200B               	addwfc	(??_sev_seg_scan+1)^0,w,c
  1226  000766  6EDA               	movwf	fsr2h,c
  1227  000768  50DF               	movf	indf2,w,c
  1228  00076A  6E0C               	movwf	(??_sev_seg_scan+2)^0,c
  1229  00076C  0E01               	movlw	1
  1230  00076E  6E0D               	movwf	(??_sev_seg_scan+3)^0,c
  1231  000770  2A0C               	incf	(??_sev_seg_scan+2)^0,f,c
  1232  000772  EFBD  F003         	goto	i2u51_44
  1233  000776                     i2u51_45:
  1234  000776  90D8               	bcf	status,0,c
  1235  000778  360D               	rlcf	(??_sev_seg_scan+3)^0,f,c
  1236  00077A                     i2u51_44:
  1237  00077A  2E0C               	decfsz	(??_sev_seg_scan+2)^0,f,c
  1238  00077C  EFBB  F003         	goto	i2u51_45
  1239  000780  501B               	movf	sev_seg_scan@i_459^0,w,c
  1240  000782  0D05               	mullw	5
  1241  000784  C008  F00E         	movff	sev_seg_scan@sev_seg,??_sev_seg_scan+4
  1242  000788  C009  F00F         	movff	sev_seg_scan@sev_seg+1,??_sev_seg_scan+5
  1243  00078C  50F3               	movf	243,w,c
  1244  00078E  260E               	addwf	(??_sev_seg_scan+4)^0,f,c
  1245  000790  50F4               	movf	244,w,c
  1246  000792  220F               	addwfc	(??_sev_seg_scan+5)^0,f,c
  1247  000794  0E38               	movlw	56
  1248  000796  240E               	addwf	(??_sev_seg_scan+4)^0,w,c
  1249  000798  6ED9               	movwf	fsr2l,c
  1250  00079A  0E00               	movlw	0
  1251  00079C  200F               	addwfc	(??_sev_seg_scan+5)^0,w,c
  1252  00079E  6EDA               	movwf	fsr2h,c
  1253  0007A0  CFDE F010          	movff	postinc2,??_sev_seg_scan+6
  1254  0007A4  CFDD F011          	movff	postdec2,??_sev_seg_scan+7
  1255  0007A8  C010  FFD9         	movff	??_sev_seg_scan+6,fsr2l
  1256  0007AC  C011  FFDA         	movff	??_sev_seg_scan+7,fsr2h
  1257  0007B0  500D               	movf	(??_sev_seg_scan+3)^0,w,c
  1258  0007B2  12DF               	iorwf	indf2,f,c
  1259  0007B4                     
  1260                           ;main.c: 98:     }
  1261  0007B4  2A1B               	incf	sev_seg_scan@i_459^0,f,c
  1262  0007B6  0E03               	movlw	3
  1263  0007B8  641B               	cpfsgt	sev_seg_scan@i_459^0,c
  1264  0007BA  EFE1  F003         	goto	i2u52_41
  1265  0007BE  EFE3  F003         	goto	i2u52_40
  1266  0007C2                     i2u52_41:
  1267  0007C2  EFA4  F003         	goto	i2l1140
  1268  0007C6                     i2u52_40:
  1269  0007C6                     
  1270                           ;main.c: 101:     (*sev_seg->digit[4 - sev_seg->current_digit - 1].port) &= ~(1 << sev_s
      +                          eg->digit[4 - sev_seg->current_digit - 1].pin);
  1271  0007C6  EE20 F008          	lfsr	2,8
  1272  0007CA  5008               	movf	sev_seg_scan@sev_seg^0,w,c
  1273  0007CC  26D9               	addwf	fsr2l,f,c
  1274  0007CE  5009               	movf	(sev_seg_scan@sev_seg+1)^0,w,c
  1275  0007D0  22DA               	addwfc	fsr2h,f,c
  1276  0007D2  50DF               	movf	indf2,w,c
  1277  0007D4  6E0A               	movwf	??_sev_seg_scan^0,c
  1278  0007D6  500A               	movf	??_sev_seg_scan^0,w,c
  1279  0007D8  6E01               	movwf	___wmul@multiplier^0,c
  1280  0007DA  6A02               	clrf	(___wmul@multiplier+1)^0,c
  1281  0007DC  0EFF               	movlw	255
  1282  0007DE  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1283  0007E0  0EFB               	movlw	251
  1284  0007E2  6E03               	movwf	___wmul@multiplicand^0,c
  1285  0007E4  ECBA  F007         	call	___wmul	;wreg free
  1286  0007E8  C008  F00B         	movff	sev_seg_scan@sev_seg,??_sev_seg_scan+1
  1287  0007EC  C009  F00C         	movff	sev_seg_scan@sev_seg+1,??_sev_seg_scan+2
  1288  0007F0  5001               	movf	?___wmul^0,w,c
  1289  0007F2  260B               	addwf	(??_sev_seg_scan+1)^0,f,c
  1290  0007F4  5002               	movf	(?___wmul+1)^0,w,c
  1291  0007F6  220C               	addwfc	(??_sev_seg_scan+2)^0,f,c
  1292  0007F8  0E49               	movlw	73
  1293  0007FA  240B               	addwf	(??_sev_seg_scan+1)^0,w,c
  1294  0007FC  6ED9               	movwf	fsr2l,c
  1295  0007FE  0E00               	movlw	0
  1296  000800  200C               	addwfc	(??_sev_seg_scan+2)^0,w,c
  1297  000802  6EDA               	movwf	fsr2h,c
  1298  000804  50DF               	movf	indf2,w,c
  1299  000806  6E0D               	movwf	(??_sev_seg_scan+3)^0,c
  1300  000808  0E01               	movlw	1
  1301  00080A  6E0E               	movwf	(??_sev_seg_scan+4)^0,c
  1302  00080C  2A0D               	incf	(??_sev_seg_scan+3)^0,f,c
  1303  00080E  EF0B  F004         	goto	i2u53_44
  1304  000812                     i2u53_45:
  1305  000812  90D8               	bcf	status,0,c
  1306  000814  360E               	rlcf	(??_sev_seg_scan+4)^0,f,c
  1307  000816                     i2u53_44:
  1308  000816  2E0D               	decfsz	(??_sev_seg_scan+3)^0,f,c
  1309  000818  EF09  F004         	goto	i2u53_45
  1310  00081C  500E               	movf	(??_sev_seg_scan+4)^0,w,c
  1311  00081E  0AFF               	xorlw	255
  1312  000820  6E0F               	movwf	(??_sev_seg_scan+5)^0,c
  1313  000822  EE20 F008          	lfsr	2,8
  1314  000826  5008               	movf	sev_seg_scan@sev_seg^0,w,c
  1315  000828  26D9               	addwf	fsr2l,f,c
  1316  00082A  5009               	movf	(sev_seg_scan@sev_seg+1)^0,w,c
  1317  00082C  22DA               	addwfc	fsr2h,f,c
  1318  00082E  50DF               	movf	indf2,w,c
  1319  000830  6E10               	movwf	(??_sev_seg_scan+6)^0,c
  1320  000832  5010               	movf	(??_sev_seg_scan+6)^0,w,c
  1321  000834  6E01               	movwf	___wmul@multiplier^0,c
  1322  000836  6A02               	clrf	(___wmul@multiplier+1)^0,c
  1323  000838  0EFF               	movlw	255
  1324  00083A  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1325  00083C  0EFB               	movlw	251
  1326  00083E  6E03               	movwf	___wmul@multiplicand^0,c
  1327  000840  ECBA  F007         	call	___wmul	;wreg free
  1328  000844  C008  F011         	movff	sev_seg_scan@sev_seg,??_sev_seg_scan+7
  1329  000848  C009  F012         	movff	sev_seg_scan@sev_seg+1,??_sev_seg_scan+8
  1330  00084C  5001               	movf	?___wmul^0,w,c
  1331  00084E  2611               	addwf	(??_sev_seg_scan+7)^0,f,c
  1332  000850  5002               	movf	(?___wmul+1)^0,w,c
  1333  000852  2212               	addwfc	(??_sev_seg_scan+8)^0,f,c
  1334  000854  0E47               	movlw	71
  1335  000856  2411               	addwf	(??_sev_seg_scan+7)^0,w,c
  1336  000858  6ED9               	movwf	fsr2l,c
  1337  00085A  0E00               	movlw	0
  1338  00085C  2012               	addwfc	(??_sev_seg_scan+8)^0,w,c
  1339  00085E  6EDA               	movwf	fsr2h,c
  1340  000860  CFDE F013          	movff	postinc2,??_sev_seg_scan+9
  1341  000864  CFDD F014          	movff	postdec2,??_sev_seg_scan+10
  1342  000868  C013  FFD9         	movff	??_sev_seg_scan+9,fsr2l
  1343  00086C  C014  FFDA         	movff	??_sev_seg_scan+10,fsr2h
  1344  000870  500F               	movf	(??_sev_seg_scan+5)^0,w,c
  1345  000872  16DF               	andwf	indf2,f,c
  1346  000874                     
  1347                           ;main.c: 104:     for (uint8_t i = 0; i < 8; i++) {
  1348  000874  0E00               	movlw	0
  1349  000876  6E1C               	movwf	sev_seg_scan@i_463^0,c
  1350  000878                     i2l1154:
  1351                           
  1352                           ;main.c: 105:         (*sev_seg->seg[i].port) |= (1 << sev_seg->seg[i].pin);
  1353  000878  501C               	movf	sev_seg_scan@i_463^0,w,c
  1354  00087A  0D05               	mullw	5
  1355  00087C  C008  F00A         	movff	sev_seg_scan@sev_seg,??_sev_seg_scan
  1356  000880  C009  F00B         	movff	sev_seg_scan@sev_seg+1,??_sev_seg_scan+1
  1357  000884  50F3               	movf	243,w,c
  1358  000886  260A               	addwf	??_sev_seg_scan^0,f,c
  1359  000888  50F4               	movf	244,w,c
  1360  00088A  220B               	addwfc	(??_sev_seg_scan+1)^0,f,c
  1361  00088C  0E12               	movlw	18
  1362  00088E  240A               	addwf	??_sev_seg_scan^0,w,c
  1363  000890  6ED9               	movwf	fsr2l,c
  1364  000892  0E00               	movlw	0
  1365  000894  200B               	addwfc	(??_sev_seg_scan+1)^0,w,c
  1366  000896  6EDA               	movwf	fsr2h,c
  1367  000898  50DF               	movf	indf2,w,c
  1368  00089A  6E0C               	movwf	(??_sev_seg_scan+2)^0,c
  1369  00089C  0E01               	movlw	1
  1370  00089E  6E0D               	movwf	(??_sev_seg_scan+3)^0,c
  1371  0008A0  2A0C               	incf	(??_sev_seg_scan+2)^0,f,c
  1372  0008A2  EF55  F004         	goto	i2u54_44
  1373  0008A6                     i2u54_45:
  1374  0008A6  90D8               	bcf	status,0,c
  1375  0008A8  360D               	rlcf	(??_sev_seg_scan+3)^0,f,c
  1376  0008AA                     i2u54_44:
  1377  0008AA  2E0C               	decfsz	(??_sev_seg_scan+2)^0,f,c
  1378  0008AC  EF53  F004         	goto	i2u54_45
  1379  0008B0  501C               	movf	sev_seg_scan@i_463^0,w,c
  1380  0008B2  0D05               	mullw	5
  1381  0008B4  C008  F00E         	movff	sev_seg_scan@sev_seg,??_sev_seg_scan+4
  1382  0008B8  C009  F00F         	movff	sev_seg_scan@sev_seg+1,??_sev_seg_scan+5
  1383  0008BC  50F3               	movf	243,w,c
  1384  0008BE  260E               	addwf	(??_sev_seg_scan+4)^0,f,c
  1385  0008C0  50F4               	movf	244,w,c
  1386  0008C2  220F               	addwfc	(??_sev_seg_scan+5)^0,f,c
  1387  0008C4  0E10               	movlw	16
  1388  0008C6  240E               	addwf	(??_sev_seg_scan+4)^0,w,c
  1389  0008C8  6ED9               	movwf	fsr2l,c
  1390  0008CA  0E00               	movlw	0
  1391  0008CC  200F               	addwfc	(??_sev_seg_scan+5)^0,w,c
  1392  0008CE  6EDA               	movwf	fsr2h,c
  1393  0008D0  CFDE F010          	movff	postinc2,??_sev_seg_scan+6
  1394  0008D4  CFDD F011          	movff	postdec2,??_sev_seg_scan+7
  1395  0008D8  C010  FFD9         	movff	??_sev_seg_scan+6,fsr2l
  1396  0008DC  C011  FFDA         	movff	??_sev_seg_scan+7,fsr2h
  1397  0008E0  500D               	movf	(??_sev_seg_scan+3)^0,w,c
  1398  0008E2  12DF               	iorwf	indf2,f,c
  1399  0008E4                     
  1400                           ;main.c: 106:     }
  1401  0008E4  2A1C               	incf	sev_seg_scan@i_463^0,f,c
  1402  0008E6  0E07               	movlw	7
  1403  0008E8  641C               	cpfsgt	sev_seg_scan@i_463^0,c
  1404  0008EA  EF79  F004         	goto	i2u55_41
  1405  0008EE  EF7B  F004         	goto	i2u55_40
  1406  0008F2                     i2u55_41:
  1407  0008F2  EF3C  F004         	goto	i2l1154
  1408  0008F6                     i2u55_40:
  1409  0008F6                     
  1410                           ;main.c: 109:     for (uint8_t i = 0; i < 4; i++) {
  1411  0008F6  0E00               	movlw	0
  1412  0008F8  6E19               	movwf	sev_seg_scan@i_464^0,c
  1413  0008FA                     i2l1166:
  1414                           
  1415                           ;main.c: 110:         if (sev_seg->special_char[i] != 0) {
  1416  0008FA  5019               	movf	sev_seg_scan@i_464^0,w,c
  1417  0008FC  2408               	addwf	sev_seg_scan@sev_seg^0,w,c
  1418  0008FE  6E0A               	movwf	??_sev_seg_scan^0,c
  1419  000900  0E00               	movlw	0
  1420  000902  2009               	addwfc	(sev_seg_scan@sev_seg+1)^0,w,c
  1421  000904  6E0B               	movwf	(??_sev_seg_scan+1)^0,c
  1422  000906  0E0A               	movlw	10
  1423  000908  240A               	addwf	??_sev_seg_scan^0,w,c
  1424  00090A  6ED9               	movwf	fsr2l,c
  1425  00090C  0E00               	movlw	0
  1426  00090E  200B               	addwfc	(??_sev_seg_scan+1)^0,w,c
  1427  000910  6EDA               	movwf	fsr2h,c
  1428  000912  50DF               	movf	indf2,w,c
  1429  000914  B4D8               	btfsc	status,2,c
  1430  000916  EF8F  F004         	goto	i2u56_41
  1431  00091A  EF91  F004         	goto	i2u56_40
  1432  00091E                     i2u56_41:
  1433  00091E  EF93  F004         	goto	i2l1170
  1434  000922                     i2u56_40:
  1435  000922                     
  1436                           ;main.c: 111:             is_special_char_enabled = 1;
  1437  000922  0E01               	movlw	1
  1438  000924  6E15               	movwf	sev_seg_scan@is_special_char_enabled^0,c
  1439  000926                     i2l1170:
  1440                           
  1441                           ;main.c: 113:     }
  1442  000926  2A19               	incf	sev_seg_scan@i_464^0,f,c
  1443  000928  0E03               	movlw	3
  1444  00092A  6419               	cpfsgt	sev_seg_scan@i_464^0,c
  1445  00092C  EF9A  F004         	goto	i2u57_41
  1446  000930  EF9C  F004         	goto	i2u57_40
  1447  000934                     i2u57_41:
  1448  000934  EF7D  F004         	goto	i2l1166
  1449  000938                     i2u57_40:
  1450  000938                     
  1451                           ;main.c: 116:     if (is_special_char_enabled) {
  1452  000938  5015               	movf	sev_seg_scan@is_special_char_enabled^0,w,c
  1453  00093A  B4D8               	btfsc	status,2,c
  1454  00093C  EFA2  F004         	goto	i2u58_41
  1455  000940  EFA4  F004         	goto	i2u58_40
  1456  000944                     i2u58_41:
  1457  000944  EFBC  F004         	goto	i2l1178
  1458  000948                     i2u58_40:
  1459  000948                     
  1460                           ;main.c: 117:         digit_val = sev_seg->special_char[sev_seg->current_digit];
  1461  000948  EE20 F008          	lfsr	2,8
  1462  00094C  5008               	movf	sev_seg_scan@sev_seg^0,w,c
  1463  00094E  26D9               	addwf	fsr2l,f,c
  1464  000950  5009               	movf	(sev_seg_scan@sev_seg+1)^0,w,c
  1465  000952  22DA               	addwfc	fsr2h,f,c
  1466  000954  50DF               	movf	indf2,w,c
  1467  000956  6E0A               	movwf	??_sev_seg_scan^0,c
  1468  000958  500A               	movf	??_sev_seg_scan^0,w,c
  1469  00095A  2408               	addwf	sev_seg_scan@sev_seg^0,w,c
  1470  00095C  6E0B               	movwf	(??_sev_seg_scan+1)^0,c
  1471  00095E  0E00               	movlw	0
  1472  000960  2009               	addwfc	(sev_seg_scan@sev_seg+1)^0,w,c
  1473  000962  6E0C               	movwf	(??_sev_seg_scan+2)^0,c
  1474  000964  0E0A               	movlw	10
  1475  000966  240B               	addwf	(??_sev_seg_scan+1)^0,w,c
  1476  000968  6ED9               	movwf	fsr2l,c
  1477  00096A  0E00               	movlw	0
  1478  00096C  200C               	addwfc	(??_sev_seg_scan+2)^0,w,c
  1479  00096E  6EDA               	movwf	fsr2h,c
  1480  000970  50DF               	movf	indf2,w,c
  1481  000972  6E18               	movwf	sev_seg_scan@digit_val^0,c
  1482                           
  1483                           ;main.c: 118:     }
  1484  000974  EF25  F005         	goto	i2l1192
  1485  000978                     i2l1178:
  1486                           
  1487                           ;main.c: 122:         sev_seg->display_dig_val = sev_seg->display_num;
  1488  000978  C008  FFD9         	movff	sev_seg_scan@sev_seg,fsr2l
  1489  00097C  C009  FFDA         	movff	sev_seg_scan@sev_seg+1,fsr2h
  1490  000980  EE10 F002          	lfsr	1,2
  1491  000984  5008               	movf	sev_seg_scan@sev_seg^0,w,c
  1492  000986  26E1               	addwf	fsr1l,f,c
  1493  000988  5009               	movf	(sev_seg_scan@sev_seg+1)^0,w,c
  1494  00098A  22E2               	addwfc	fsr1h,f,c
  1495  00098C  CFDE FFE6          	movff	postinc2,postinc1
  1496  000990  CFDD FFE5          	movff	postdec2,postdec1
  1497  000994                     
  1498                           ;main.c: 123:         for (uint8_t i = 0; i < sev_seg->current_digit; i++) {
  1499  000994  0E00               	movlw	0
  1500  000996  6E16               	movwf	sev_seg_scan@i_465^0,c
  1501  000998  EFE9  F004         	goto	i2l1186
  1502  00099C                     i2l1182:
  1503                           
  1504                           ;main.c: 124:             sev_seg->display_dig_val /= 10;
  1505  00099C  EE20 F002          	lfsr	2,2
  1506  0009A0  5008               	movf	sev_seg_scan@sev_seg^0,w,c
  1507  0009A2  26D9               	addwf	fsr2l,f,c
  1508  0009A4  5009               	movf	(sev_seg_scan@sev_seg+1)^0,w,c
  1509  0009A6  22DA               	addwfc	fsr2h,f,c
  1510  0009A8  CFDE F001          	movff	postinc2,___lwdiv@dividend
  1511  0009AC  CFDD F002          	movff	postdec2,___lwdiv@dividend+1
  1512  0009B0  0E00               	movlw	0
  1513  0009B2  6E04               	movwf	(___lwdiv@divisor+1)^0,c
  1514  0009B4  0E0A               	movlw	10
  1515  0009B6  6E03               	movwf	___lwdiv@divisor^0,c
  1516  0009B8  EC4E  F007         	call	___lwdiv	;wreg free
  1517  0009BC  EE20 F002          	lfsr	2,2
  1518  0009C0  5008               	movf	sev_seg_scan@sev_seg^0,w,c
  1519  0009C2  26D9               	addwf	fsr2l,f,c
  1520  0009C4  5009               	movf	(sev_seg_scan@sev_seg+1)^0,w,c
  1521  0009C6  22DA               	addwfc	fsr2h,f,c
  1522  0009C8  C001  FFDE         	movff	?___lwdiv,postinc2
  1523  0009CC  C002  FFDD         	movff	?___lwdiv+1,postdec2
  1524  0009D0                     
  1525                           ;main.c: 125:         }
  1526  0009D0  2A16               	incf	sev_seg_scan@i_465^0,f,c
  1527  0009D2                     i2l1186:
  1528  0009D2  EE20 F008          	lfsr	2,8
  1529  0009D6  5008               	movf	sev_seg_scan@sev_seg^0,w,c
  1530  0009D8  26D9               	addwf	fsr2l,f,c
  1531  0009DA  5009               	movf	(sev_seg_scan@sev_seg+1)^0,w,c
  1532  0009DC  22DA               	addwfc	fsr2h,f,c
  1533  0009DE  50DE               	movf	postinc2,w,c
  1534  0009E0  5C16               	subwf	sev_seg_scan@i_465^0,w,c
  1535  0009E2  A0D8               	btfss	status,0,c
  1536  0009E4  EFF6  F004         	goto	i2u59_41
  1537  0009E8  EFF8  F004         	goto	i2u59_40
  1538  0009EC                     i2u59_41:
  1539  0009EC  EFCE  F004         	goto	i2l1182
  1540  0009F0                     i2u59_40:
  1541  0009F0                     
  1542                           ;main.c: 126:         sev_seg->display_dig_val %= 10;
  1543  0009F0  EE20 F002          	lfsr	2,2
  1544  0009F4  5008               	movf	sev_seg_scan@sev_seg^0,w,c
  1545  0009F6  26D9               	addwf	fsr2l,f,c
  1546  0009F8  5009               	movf	(sev_seg_scan@sev_seg+1)^0,w,c
  1547  0009FA  22DA               	addwfc	fsr2h,f,c
  1548  0009FC  CFDE F001          	movff	postinc2,___lwmod@dividend
  1549  000A00  CFDD F002          	movff	postdec2,___lwmod@dividend+1
  1550  000A04  0E00               	movlw	0
  1551  000A06  6E04               	movwf	(___lwmod@divisor+1)^0,c
  1552  000A08  0E0A               	movlw	10
  1553  000A0A  6E03               	movwf	___lwmod@divisor^0,c
  1554  000A0C  EC88  F007         	call	___lwmod	;wreg free
  1555  000A10  EE20 F002          	lfsr	2,2
  1556  000A14  5008               	movf	sev_seg_scan@sev_seg^0,w,c
  1557  000A16  26D9               	addwf	fsr2l,f,c
  1558  000A18  5009               	movf	(sev_seg_scan@sev_seg+1)^0,w,c
  1559  000A1A  22DA               	addwfc	fsr2h,f,c
  1560  000A1C  C001  FFDE         	movff	?___lwmod,postinc2
  1561  000A20  C002  FFDD         	movff	?___lwmod+1,postdec2
  1562  000A24                     
  1563                           ;main.c: 129:         digit_val = char_map[sev_seg->display_dig_val];
  1564  000A24  EE20 F002          	lfsr	2,2
  1565  000A28  5008               	movf	sev_seg_scan@sev_seg^0,w,c
  1566  000A2A  26D9               	addwf	fsr2l,f,c
  1567  000A2C  5009               	movf	(sev_seg_scan@sev_seg+1)^0,w,c
  1568  000A2E  22DA               	addwfc	fsr2h,f,c
  1569  000A30  CFDE F00A          	movff	postinc2,??_sev_seg_scan
  1570  000A34  CFDD F00B          	movff	postdec2,??_sev_seg_scan+1
  1571  000A38  0E01               	movlw	low _char_map
  1572  000A3A  240A               	addwf	??_sev_seg_scan^0,w,c
  1573  000A3C  6EF6               	movwf	tblptrl,c
  1574  000A3E  0E06               	movlw	high _char_map
  1575  000A40  200B               	addwfc	(??_sev_seg_scan+1)^0,w,c
  1576  000A42  6EF7               	movwf	tblptrh,c
  1577  000A44                     	if	0	;There are less than 3 active tblptr bytes
  1578  000A44                     	endif
  1579  000A44  0008               	tblrd		*
  1580  000A46  CFF5 F018          	movff	tablat,sev_seg_scan@digit_val
  1581  000A4A                     i2l1192:
  1582                           
  1583                           ;main.c: 133:     for (uint8_t i = 0, j = 0b01000000; i < 8 - 1; i++, j >>= 1) {
  1584  000A4A  0E00               	movlw	0
  1585  000A4C  6E1D               	movwf	sev_seg_scan@i_466^0,c
  1586  000A4E  0E40               	movlw	64
  1587  000A50  6E17               	movwf	sev_seg_scan@j^0,c
  1588  000A52                     i2l1200:
  1589                           
  1590                           ;main.c: 134:         if (digit_val & j) {
  1591  000A52  5018               	movf	sev_seg_scan@digit_val^0,w,c
  1592  000A54  1417               	andwf	sev_seg_scan@j^0,w,c
  1593  000A56  0900               	iorlw	0
  1594  000A58  B4D8               	btfsc	status,2,c
  1595  000A5A  EF31  F005         	goto	i2u60_41
  1596  000A5E  EF33  F005         	goto	i2u60_40
  1597  000A62                     i2u60_41:
  1598  000A62  EF6C  F005         	goto	i2l1204
  1599  000A66                     i2u60_40:
  1600  000A66                     
  1601                           ;main.c: 135:             (*sev_seg->seg[i].port) &= ~(1 << sev_seg->seg[i].pin);
  1602  000A66  501D               	movf	sev_seg_scan@i_466^0,w,c
  1603  000A68  0D05               	mullw	5
  1604  000A6A  C008  F00A         	movff	sev_seg_scan@sev_seg,??_sev_seg_scan
  1605  000A6E  C009  F00B         	movff	sev_seg_scan@sev_seg+1,??_sev_seg_scan+1
  1606  000A72  50F3               	movf	243,w,c
  1607  000A74  260A               	addwf	??_sev_seg_scan^0,f,c
  1608  000A76  50F4               	movf	244,w,c
  1609  000A78  220B               	addwfc	(??_sev_seg_scan+1)^0,f,c
  1610  000A7A  0E12               	movlw	18
  1611  000A7C  240A               	addwf	??_sev_seg_scan^0,w,c
  1612  000A7E  6ED9               	movwf	fsr2l,c
  1613  000A80  0E00               	movlw	0
  1614  000A82  200B               	addwfc	(??_sev_seg_scan+1)^0,w,c
  1615  000A84  6EDA               	movwf	fsr2h,c
  1616  000A86  50DF               	movf	indf2,w,c
  1617  000A88  6E0C               	movwf	(??_sev_seg_scan+2)^0,c
  1618  000A8A  0E01               	movlw	1
  1619  000A8C  6E0D               	movwf	(??_sev_seg_scan+3)^0,c
  1620  000A8E  2A0C               	incf	(??_sev_seg_scan+2)^0,f,c
  1621  000A90  EF4C  F005         	goto	i2u61_44
  1622  000A94                     i2u61_45:
  1623  000A94  90D8               	bcf	status,0,c
  1624  000A96  360D               	rlcf	(??_sev_seg_scan+3)^0,f,c
  1625  000A98                     i2u61_44:
  1626  000A98  2E0C               	decfsz	(??_sev_seg_scan+2)^0,f,c
  1627  000A9A  EF4A  F005         	goto	i2u61_45
  1628  000A9E  500D               	movf	(??_sev_seg_scan+3)^0,w,c
  1629  000AA0  0AFF               	xorlw	255
  1630  000AA2  6E0E               	movwf	(??_sev_seg_scan+4)^0,c
  1631  000AA4  501D               	movf	sev_seg_scan@i_466^0,w,c
  1632  000AA6  0D05               	mullw	5
  1633  000AA8  C008  F00F         	movff	sev_seg_scan@sev_seg,??_sev_seg_scan+5
  1634  000AAC  C009  F010         	movff	sev_seg_scan@sev_seg+1,??_sev_seg_scan+6
  1635  000AB0  50F3               	movf	243,w,c
  1636  000AB2  260F               	addwf	(??_sev_seg_scan+5)^0,f,c
  1637  000AB4  50F4               	movf	244,w,c
  1638  000AB6  2210               	addwfc	(??_sev_seg_scan+6)^0,f,c
  1639  000AB8  0E10               	movlw	16
  1640  000ABA  240F               	addwf	(??_sev_seg_scan+5)^0,w,c
  1641  000ABC  6ED9               	movwf	fsr2l,c
  1642  000ABE  0E00               	movlw	0
  1643  000AC0  2010               	addwfc	(??_sev_seg_scan+6)^0,w,c
  1644  000AC2  6EDA               	movwf	fsr2h,c
  1645  000AC4  CFDE F011          	movff	postinc2,??_sev_seg_scan+7
  1646  000AC8  CFDD F012          	movff	postdec2,??_sev_seg_scan+8
  1647  000ACC  C011  FFD9         	movff	??_sev_seg_scan+7,fsr2l
  1648  000AD0  C012  FFDA         	movff	??_sev_seg_scan+8,fsr2h
  1649  000AD4  500E               	movf	(??_sev_seg_scan+4)^0,w,c
  1650  000AD6  16DF               	andwf	indf2,f,c
  1651  000AD8                     i2l1204:
  1652                           
  1653                           ;main.c: 137:     }
  1654  000AD8  2A1D               	incf	sev_seg_scan@i_466^0,f,c
  1655  000ADA  90D8               	bcf	status,0,c
  1656  000ADC  3217               	rrcf	sev_seg_scan@j^0,f,c
  1657  000ADE  0E06               	movlw	6
  1658  000AE0  641D               	cpfsgt	sev_seg_scan@i_466^0,c
  1659  000AE2  EF75  F005         	goto	i2u62_41
  1660  000AE6  EF77  F005         	goto	i2u62_40
  1661  000AEA                     i2u62_41:
  1662  000AEA  EF29  F005         	goto	i2l1200
  1663  000AEE                     i2u62_40:
  1664  000AEE                     
  1665                           ;main.c: 140:     if (sev_seg->current_digit++ > 4) {
  1666  000AEE  EE20 F008          	lfsr	2,8
  1667  000AF2  5008               	movf	sev_seg_scan@sev_seg^0,w,c
  1668  000AF4  26D9               	addwf	fsr2l,f,c
  1669  000AF6  5009               	movf	(sev_seg_scan@sev_seg+1)^0,w,c
  1670  000AF8  22DA               	addwfc	fsr2h,f,c
  1671  000AFA  CFDF F00A          	movff	indf2,??_sev_seg_scan
  1672  000AFE  0E01               	movlw	1
  1673  000B00  26DF               	addwf	indf2,f,c
  1674  000B02  0E04               	movlw	4
  1675  000B04  640A               	cpfsgt	??_sev_seg_scan^0,c
  1676  000B06  EF87  F005         	goto	i2u63_41
  1677  000B0A  EF89  F005         	goto	i2u63_40
  1678  000B0E                     i2u63_41:
  1679  000B0E  EF91  F005         	goto	i2l57
  1680  000B12                     i2u63_40:
  1681  000B12                     
  1682                           ;main.c: 141:         sev_seg->current_digit = 0;
  1683  000B12  EE20 F008          	lfsr	2,8
  1684  000B16  5008               	movf	sev_seg_scan@sev_seg^0,w,c
  1685  000B18  26D9               	addwf	fsr2l,f,c
  1686  000B1A  5009               	movf	(sev_seg_scan@sev_seg+1)^0,w,c
  1687  000B1C  22DA               	addwfc	fsr2h,f,c
  1688  000B1E  0E00               	movlw	0
  1689  000B20  6EDF               	movwf	indf2,c
  1690  000B22                     i2l57:
  1691  000B22  0012               	return		;funcret
  1692  000B24                     __end_of_sev_seg_scan:
  1693                           	callstack 0
  1694                           
  1695 ;; *************** function ___wmul *****************
  1696 ;; Defined at:
  1697 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\Umul16.c"
  1698 ;; Parameters:    Size  Location     Type
  1699 ;;  multiplier      2    0[COMRAM] unsigned int 
  1700 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1701 ;; Auto vars:     Size  Location     Type
  1702 ;;  product         2    4[COMRAM] unsigned int 
  1703 ;; Return value:  Size  Location     Type
  1704 ;;                  2    0[COMRAM] unsigned int 
  1705 ;; Registers used:
  1706 ;;		wreg, status,2, status,0, prodl, prodh
  1707 ;; Tracked objects:
  1708 ;;		On entry : 0/0
  1709 ;;		On exit  : 0/0
  1710 ;;		Unchanged: 0/0
  1711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1712 ;;      Params:         4       0       0       0       0       0       0
  1713 ;;      Locals:         2       0       0       0       0       0       0
  1714 ;;      Temps:          0       0       0       0       0       0       0
  1715 ;;      Totals:         6       0       0       0       0       0       0
  1716 ;;Total ram usage:        6 bytes
  1717 ;; Hardware stack levels used: 1
  1718 ;; This function calls:
  1719 ;;		Nothing
  1720 ;; This function is called by:
  1721 ;;		_sev_seg_scan
  1722 ;; This function uses a non-reentrant model
  1723 ;;
  1724                           
  1725                           	psect	text4
  1726  000F74                     __ptext4:
  1727                           	callstack 0
  1728  000F74                     ___wmul:
  1729                           	callstack 27
  1730  000F74  5001               	movf	___wmul@multiplier^0,w,c
  1731  000F76  0203               	mulwf	___wmul@multiplicand^0,c
  1732  000F78  CFF3 F005          	movff	prodl,___wmul@product
  1733  000F7C  CFF4 F006          	movff	prodh,___wmul@product+1
  1734  000F80  5001               	movf	___wmul@multiplier^0,w,c
  1735  000F82  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  1736  000F84  50F3               	movf	243,w,c
  1737  000F86  2606               	addwf	(___wmul@product+1)^0,f,c
  1738  000F88  5002               	movf	(___wmul@multiplier+1)^0,w,c
  1739  000F8A  0203               	mulwf	___wmul@multiplicand^0,c
  1740  000F8C  50F3               	movf	243,w,c
  1741  000F8E  2606               	addwf	(___wmul@product+1)^0,f,c
  1742  000F90  C005  F001         	movff	___wmul@product,?___wmul
  1743  000F94  C006  F002         	movff	___wmul@product+1,?___wmul+1
  1744  000F98  0012               	return		;funcret
  1745  000F9A                     __end_of___wmul:
  1746                           	callstack 0
  1747                           
  1748 ;; *************** function ___lwmod *****************
  1749 ;; Defined at:
  1750 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\lwmod.c"
  1751 ;; Parameters:    Size  Location     Type
  1752 ;;  dividend        2    0[COMRAM] unsigned int 
  1753 ;;  divisor         2    2[COMRAM] unsigned int 
  1754 ;; Auto vars:     Size  Location     Type
  1755 ;;  counter         1    4[COMRAM] unsigned char 
  1756 ;; Return value:  Size  Location     Type
  1757 ;;                  2    0[COMRAM] unsigned int 
  1758 ;; Registers used:
  1759 ;;		wreg, status,2, status,0
  1760 ;; Tracked objects:
  1761 ;;		On entry : 0/0
  1762 ;;		On exit  : 0/0
  1763 ;;		Unchanged: 0/0
  1764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1765 ;;      Params:         4       0       0       0       0       0       0
  1766 ;;      Locals:         1       0       0       0       0       0       0
  1767 ;;      Temps:          0       0       0       0       0       0       0
  1768 ;;      Totals:         5       0       0       0       0       0       0
  1769 ;;Total ram usage:        5 bytes
  1770 ;; Hardware stack levels used: 1
  1771 ;; This function calls:
  1772 ;;		Nothing
  1773 ;; This function is called by:
  1774 ;;		_sev_seg_scan
  1775 ;; This function uses a non-reentrant model
  1776 ;;
  1777                           
  1778                           	psect	text5
  1779  000F10                     __ptext5:
  1780                           	callstack 0
  1781  000F10                     ___lwmod:
  1782                           	callstack 27
  1783  000F10  5003               	movf	___lwmod@divisor^0,w,c
  1784  000F12  1004               	iorwf	(___lwmod@divisor+1)^0,w,c
  1785  000F14  B4D8               	btfsc	status,2,c
  1786  000F16  EF8F  F007         	goto	i2u38_41
  1787  000F1A  EF91  F007         	goto	i2u38_40
  1788  000F1E                     i2u38_41:
  1789  000F1E  EFB5  F007         	goto	i2l602
  1790  000F22                     i2u38_40:
  1791  000F22  0E01               	movlw	1
  1792  000F24  6E05               	movwf	___lwmod@counter^0,c
  1793  000F26  EF99  F007         	goto	i2l1070
  1794  000F2A                     i2l1068:
  1795  000F2A  90D8               	bcf	status,0,c
  1796  000F2C  3603               	rlcf	___lwmod@divisor^0,f,c
  1797  000F2E  3604               	rlcf	(___lwmod@divisor+1)^0,f,c
  1798  000F30  2A05               	incf	___lwmod@counter^0,f,c
  1799  000F32                     i2l1070:
  1800  000F32  AE04               	btfss	(___lwmod@divisor+1)^0,7,c
  1801  000F34  EF9E  F007         	goto	i2u39_41
  1802  000F38  EFA0  F007         	goto	i2u39_40
  1803  000F3C                     i2u39_41:
  1804  000F3C  EF95  F007         	goto	i2l1068
  1805  000F40                     i2u39_40:
  1806  000F40                     i2l1072:
  1807  000F40  5003               	movf	___lwmod@divisor^0,w,c
  1808  000F42  5C01               	subwf	___lwmod@dividend^0,w,c
  1809  000F44  5004               	movf	(___lwmod@divisor+1)^0,w,c
  1810  000F46  5802               	subwfb	(___lwmod@dividend+1)^0,w,c
  1811  000F48  A0D8               	btfss	status,0,c
  1812  000F4A  EFA9  F007         	goto	i2u40_41
  1813  000F4E  EFAB  F007         	goto	i2u40_40
  1814  000F52                     i2u40_41:
  1815  000F52  EFAF  F007         	goto	i2l1076
  1816  000F56                     i2u40_40:
  1817  000F56  5003               	movf	___lwmod@divisor^0,w,c
  1818  000F58  5E01               	subwf	___lwmod@dividend^0,f,c
  1819  000F5A  5004               	movf	(___lwmod@divisor+1)^0,w,c
  1820  000F5C  5A02               	subwfb	(___lwmod@dividend+1)^0,f,c
  1821  000F5E                     i2l1076:
  1822  000F5E  90D8               	bcf	status,0,c
  1823  000F60  3204               	rrcf	(___lwmod@divisor+1)^0,f,c
  1824  000F62  3203               	rrcf	___lwmod@divisor^0,f,c
  1825  000F64  2E05               	decfsz	___lwmod@counter^0,f,c
  1826  000F66  EFA0  F007         	goto	i2l1072
  1827  000F6A                     i2l602:
  1828  000F6A  C001  F001         	movff	___lwmod@dividend,?___lwmod
  1829  000F6E  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
  1830  000F72  0012               	return		;funcret
  1831  000F74                     __end_of___lwmod:
  1832                           	callstack 0
  1833                           
  1834 ;; *************** function ___lwdiv *****************
  1835 ;; Defined at:
  1836 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\lwdiv.c"
  1837 ;; Parameters:    Size  Location     Type
  1838 ;;  dividend        2    0[COMRAM] unsigned int 
  1839 ;;  divisor         2    2[COMRAM] unsigned int 
  1840 ;; Auto vars:     Size  Location     Type
  1841 ;;  quotient        2    4[COMRAM] unsigned int 
  1842 ;;  counter         1    6[COMRAM] unsigned char 
  1843 ;; Return value:  Size  Location     Type
  1844 ;;                  2    0[COMRAM] unsigned int 
  1845 ;; Registers used:
  1846 ;;		wreg, status,2, status,0
  1847 ;; Tracked objects:
  1848 ;;		On entry : 0/0
  1849 ;;		On exit  : 0/0
  1850 ;;		Unchanged: 0/0
  1851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1852 ;;      Params:         4       0       0       0       0       0       0
  1853 ;;      Locals:         3       0       0       0       0       0       0
  1854 ;;      Temps:          0       0       0       0       0       0       0
  1855 ;;      Totals:         7       0       0       0       0       0       0
  1856 ;;Total ram usage:        7 bytes
  1857 ;; Hardware stack levels used: 1
  1858 ;; This function calls:
  1859 ;;		Nothing
  1860 ;; This function is called by:
  1861 ;;		_sev_seg_scan
  1862 ;; This function uses a non-reentrant model
  1863 ;;
  1864                           
  1865                           	psect	text6
  1866  000E9C                     __ptext6:
  1867                           	callstack 0
  1868  000E9C                     ___lwdiv:
  1869                           	callstack 27
  1870  000E9C  0E00               	movlw	0
  1871  000E9E  6E06               	movwf	(___lwdiv@quotient+1)^0,c
  1872  000EA0  0E00               	movlw	0
  1873  000EA2  6E05               	movwf	___lwdiv@quotient^0,c
  1874  000EA4  5003               	movf	___lwdiv@divisor^0,w,c
  1875  000EA6  1004               	iorwf	(___lwdiv@divisor+1)^0,w,c
  1876  000EA8  B4D8               	btfsc	status,2,c
  1877  000EAA  EF59  F007         	goto	i2u35_41
  1878  000EAE  EF5B  F007         	goto	i2u35_40
  1879  000EB2                     i2u35_41:
  1880  000EB2  EF83  F007         	goto	i2l592
  1881  000EB6                     i2u35_40:
  1882  000EB6  0E01               	movlw	1
  1883  000EB8  6E07               	movwf	___lwdiv@counter^0,c
  1884  000EBA  EF63  F007         	goto	i2l1050
  1885  000EBE                     i2l1048:
  1886  000EBE  90D8               	bcf	status,0,c
  1887  000EC0  3603               	rlcf	___lwdiv@divisor^0,f,c
  1888  000EC2  3604               	rlcf	(___lwdiv@divisor+1)^0,f,c
  1889  000EC4  2A07               	incf	___lwdiv@counter^0,f,c
  1890  000EC6                     i2l1050:
  1891  000EC6  AE04               	btfss	(___lwdiv@divisor+1)^0,7,c
  1892  000EC8  EF68  F007         	goto	i2u36_41
  1893  000ECC  EF6A  F007         	goto	i2u36_40
  1894  000ED0                     i2u36_41:
  1895  000ED0  EF5F  F007         	goto	i2l1048
  1896  000ED4                     i2u36_40:
  1897  000ED4                     i2l1052:
  1898  000ED4  90D8               	bcf	status,0,c
  1899  000ED6  3605               	rlcf	___lwdiv@quotient^0,f,c
  1900  000ED8  3606               	rlcf	(___lwdiv@quotient+1)^0,f,c
  1901  000EDA  5003               	movf	___lwdiv@divisor^0,w,c
  1902  000EDC  5C01               	subwf	___lwdiv@dividend^0,w,c
  1903  000EDE  5004               	movf	(___lwdiv@divisor+1)^0,w,c
  1904  000EE0  5802               	subwfb	(___lwdiv@dividend+1)^0,w,c
  1905  000EE2  A0D8               	btfss	status,0,c
  1906  000EE4  EF76  F007         	goto	i2u37_41
  1907  000EE8  EF78  F007         	goto	i2u37_40
  1908  000EEC                     i2u37_41:
  1909  000EEC  EF7D  F007         	goto	i2l1060
  1910  000EF0                     i2u37_40:
  1911  000EF0  5003               	movf	___lwdiv@divisor^0,w,c
  1912  000EF2  5E01               	subwf	___lwdiv@dividend^0,f,c
  1913  000EF4  5004               	movf	(___lwdiv@divisor+1)^0,w,c
  1914  000EF6  5A02               	subwfb	(___lwdiv@dividend+1)^0,f,c
  1915  000EF8  8005               	bsf	___lwdiv@quotient^0,0,c
  1916  000EFA                     i2l1060:
  1917  000EFA  90D8               	bcf	status,0,c
  1918  000EFC  3204               	rrcf	(___lwdiv@divisor+1)^0,f,c
  1919  000EFE  3203               	rrcf	___lwdiv@divisor^0,f,c
  1920  000F00  2E07               	decfsz	___lwdiv@counter^0,f,c
  1921  000F02  EF6A  F007         	goto	i2l1052
  1922  000F06                     i2l592:
  1923  000F06  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  1924  000F0A  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1925  000F0E  0012               	return		;funcret
  1926  000F10                     __end_of___lwdiv:
  1927                           	callstack 0
  1928                           
  1929                           	psect	rparam
  1930  0000                     
  1931                           	psect	temp
  1932  000037                     btemp:
  1933                           	callstack 0
  1934  000037                     	ds	1
  1935  0000                     int$flags	set	btemp
  1936  0000                     wtemp8	set	btemp+1
  1937  0000                     ttemp5	set	btemp+1
  1938  0000                     ttemp6	set	btemp+4
  1939  0000                     ttemp7	set	btemp+8
  1940                           
  1941                           	psect	idloc
  1942                           
  1943                           ;Config register IDLOC0 @ 0x200000
  1944                           ;	unspecified, using default values
  1945  200000                     	org	2097152
  1946  200000  FF                 	db	255
  1947                           
  1948                           ;Config register IDLOC1 @ 0x200001
  1949                           ;	unspecified, using default values
  1950  200001                     	org	2097153
  1951  200001  FF                 	db	255
  1952                           
  1953                           ;Config register IDLOC2 @ 0x200002
  1954                           ;	unspecified, using default values
  1955  200002                     	org	2097154
  1956  200002  FF                 	db	255
  1957                           
  1958                           ;Config register IDLOC3 @ 0x200003
  1959                           ;	unspecified, using default values
  1960  200003                     	org	2097155
  1961  200003  FF                 	db	255
  1962                           
  1963                           ;Config register IDLOC4 @ 0x200004
  1964                           ;	unspecified, using default values
  1965  200004                     	org	2097156
  1966  200004  FF                 	db	255
  1967                           
  1968                           ;Config register IDLOC5 @ 0x200005
  1969                           ;	unspecified, using default values
  1970  200005                     	org	2097157
  1971  200005  FF                 	db	255
  1972                           
  1973                           ;Config register IDLOC6 @ 0x200006
  1974                           ;	unspecified, using default values
  1975  200006                     	org	2097158
  1976  200006  FF                 	db	255
  1977                           
  1978                           ;Config register IDLOC7 @ 0x200007
  1979                           ;	unspecified, using default values
  1980  200007                     	org	2097159
  1981  200007  FF                 	db	255
  1982                           
  1983                           	psect	config
  1984                           
  1985                           ; Padding undefined space
  1986  300000                     	org	3145728
  1987  300000  FF                 	db	255
  1988                           
  1989                           ;Config register CONFIG1H @ 0x300001
  1990                           ;	Oscillator Selection bits
  1991                           ;	FOSC = INTIO67, Internal oscillator block
  1992                           ;	4X PLL Enable
  1993                           ;	PLLCFG = OFF, Oscillator used directly
  1994                           ;	Primary clock enable bit
  1995                           ;	PRICLKEN = ON, Primary clock is always enabled
  1996                           ;	Fail-Safe Clock Monitor Enable bit
  1997                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1998                           ;	Internal/External Oscillator Switchover bit
  1999                           ;	IESO = OFF, Oscillator Switchover mode disabled
  2000  300001                     	org	3145729
  2001  300001  28                 	db	40
  2002                           
  2003                           ;Config register CONFIG2L @ 0x300002
  2004                           ;	Power-up Timer Enable bit
  2005                           ;	PWRTEN = OFF, Power up timer disabled
  2006                           ;	Brown-out Reset Enable bits
  2007                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  2008                           ;	Brown Out Reset Voltage bits
  2009                           ;	BORV = 190, VBOR set to 1.90 V nominal
  2010  300002                     	org	3145730
  2011  300002  1F                 	db	31
  2012                           
  2013                           ;Config register CONFIG2H @ 0x300003
  2014                           ;	Watchdog Timer Enable bits
  2015                           ;	WDTEN = OFF, Watch dog timer is always disabled. SWDTEN has no effect.
  2016                           ;	Watchdog Timer Postscale Select bits
  2017                           ;	WDTPS = 32768, 1:32768
  2018  300003                     	org	3145731
  2019  300003  3C                 	db	60
  2020                           
  2021                           ; Padding undefined space
  2022  300004                     	org	3145732
  2023  300004  FF                 	db	255
  2024                           
  2025                           ;Config register CONFIG3H @ 0x300005
  2026                           ;	CCP2 MUX bit
  2027                           ;	CCP2MX = PORTC1, CCP2 input/output is multiplexed with RC1
  2028                           ;	PORTB A/D Enable bit
  2029                           ;	PBADEN = OFF, PORTB<5:0> pins are configured as digital I/O on Reset
  2030                           ;	P3A/CCP3 Mux bit
  2031                           ;	CCP3MX = PORTB5, P3A/CCP3 input/output is multiplexed with RB5
  2032                           ;	HFINTOSC Fast Start-up
  2033                           ;	HFOFST = OFF, HFINTOSC output and ready status are delayed by the oscillator stable st
      +                          atus
  2034                           ;	Timer3 Clock input mux bit
  2035                           ;	T3CMX = PORTC0, T3CKI is on RC0
  2036                           ;	ECCP2 B output mux bit
  2037                           ;	P2BMX = PORTD2, P2B is on RD2
  2038                           ;	MCLR Pin Enable bit
  2039                           ;	MCLRE = EXTMCLR, MCLR pin enabled, RE3 input pin disabled
  2040  300005                     	org	3145733
  2041  300005  B5                 	db	181
  2042                           
  2043                           ;Config register CONFIG4L @ 0x300006
  2044                           ;	Stack Full/Underflow Reset Enable bit
  2045                           ;	STVREN = ON, Stack full/underflow will cause Reset
  2046                           ;	Single-Supply ICSP Enable bit
  2047                           ;	LVP = OFF, Single-Supply ICSP disabled
  2048                           ;	Extended Instruction Set Enable bit
  2049                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  2050                           ;	Background Debug
  2051                           ;	DEBUG = 0x1, unprogrammed default
  2052  300006                     	org	3145734
  2053  300006  81                 	db	129
  2054                           
  2055                           ; Padding undefined space
  2056  300007                     	org	3145735
  2057  300007  FF                 	db	255
  2058                           
  2059                           ;Config register CONFIG5L @ 0x300008
  2060                           ;	Code Protection Block 0
  2061                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
  2062                           ;	Code Protection Block 1
  2063                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
  2064                           ;	Code Protection Block 2
  2065                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
  2066                           ;	Code Protection Block 3
  2067                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
  2068  300008                     	org	3145736
  2069  300008  0F                 	db	15
  2070                           
  2071                           ;Config register CONFIG5H @ 0x300009
  2072                           ;	Boot Block Code Protection bit
  2073                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  2074                           ;	Data EEPROM Code Protection bit
  2075                           ;	CPD = OFF, Data EEPROM not code-protected
  2076  300009                     	org	3145737
  2077  300009  C0                 	db	192
  2078                           
  2079                           ;Config register CONFIG6L @ 0x30000A
  2080                           ;	Write Protection Block 0
  2081                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
  2082                           ;	Write Protection Block 1
  2083                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
  2084                           ;	Write Protection Block 2
  2085                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
  2086                           ;	Write Protection Block 3
  2087                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
  2088  30000A                     	org	3145738
  2089  30000A  0F                 	db	15
  2090                           
  2091                           ;Config register CONFIG6H @ 0x30000B
  2092                           ;	Configuration Register Write Protection bit
  2093                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  2094                           ;	Boot Block Write Protection bit
  2095                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
  2096                           ;	Data EEPROM Write Protection bit
  2097                           ;	WRTD = OFF, Data EEPROM not write-protected
  2098  30000B                     	org	3145739
  2099  30000B  E0                 	db	224
  2100                           
  2101                           ;Config register CONFIG7L @ 0x30000C
  2102                           ;	Table Read Protection Block 0
  2103                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
  2104                           ;	Table Read Protection Block 1
  2105                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
  2106                           ;	Table Read Protection Block 2
  2107                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
  2108                           ;	Table Read Protection Block 3
  2109                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
  2110  30000C                     	org	3145740
  2111  30000C  0F                 	db	15
  2112                           
  2113                           ;Config register CONFIG7H @ 0x30000D
  2114                           ;	Boot Block Table Read Protection bit
  2115                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  2116  30000D                     	org	3145741
  2117  30000D  40                 	db	64
  2118                           tosu	equ	0xFFF
  2119                           tosh	equ	0xFFE
  2120                           tosl	equ	0xFFD
  2121                           stkptr	equ	0xFFC
  2122                           pclatu	equ	0xFFB
  2123                           pclath	equ	0xFFA
  2124                           pcl	equ	0xFF9
  2125                           tblptru	equ	0xFF8
  2126                           tblptrh	equ	0xFF7
  2127                           tblptrl	equ	0xFF6
  2128                           tablat	equ	0xFF5
  2129                           prodh	equ	0xFF4
  2130                           prodl	equ	0xFF3
  2131                           indf0	equ	0xFEF
  2132                           postinc0	equ	0xFEE
  2133                           postdec0	equ	0xFED
  2134                           preinc0	equ	0xFEC
  2135                           plusw0	equ	0xFEB
  2136                           fsr0h	equ	0xFEA
  2137                           fsr0l	equ	0xFE9
  2138                           wreg	equ	0xFE8
  2139                           indf1	equ	0xFE7
  2140                           postinc1	equ	0xFE6
  2141                           postdec1	equ	0xFE5
  2142                           preinc1	equ	0xFE4
  2143                           plusw1	equ	0xFE3
  2144                           fsr1h	equ	0xFE2
  2145                           fsr1l	equ	0xFE1
  2146                           bsr	equ	0xFE0
  2147                           indf2	equ	0xFDF
  2148                           postinc2	equ	0xFDE
  2149                           postdec2	equ	0xFDD
  2150                           preinc2	equ	0xFDC
  2151                           plusw2	equ	0xFDB
  2152                           fsr2h	equ	0xFDA
  2153                           fsr2l	equ	0xFD9
  2154                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    16
    Data        0
    BSS         75
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     54      54
    BANK0           160      3      78
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    seven_segment.seg.port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTD(SFR_1[1]), PORTB(SFR_1[1]), 

    seven_segment.seg.dir	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISD(SFR_1[1]), TRISB(SFR_1[1]), 

    seven_segment.digit.port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTD(SFR_1[1]), PORTB(SFR_1[1]), 

    seven_segment.digit.dir	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISD(SFR_1[1]), TRISB(SFR_1[1]), 

    sev_seg_scan@sev_seg.digit.port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTD(SFR_1[1]), PORTB(SFR_1[1]), 

    sev_seg_scan@sev_seg.digit.dir	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISD(SFR_1[1]), TRISB(SFR_1[1]), 

    sev_seg_scan@sev_seg.seg.port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTD(SFR_1[1]), PORTB(SFR_1[1]), 

    sev_seg_scan@sev_seg.seg.dir	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISD(SFR_1[1]), TRISB(SFR_1[1]), 

    sev_seg_scan@sev_seg	PTR struct . size(2) Largest target is 99
		 -> seven_segment(BANK0[75]), 

    sev_seg_init@sev_seg.seg.port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTD(SFR_1[1]), PORTB(SFR_1[1]), 

    sev_seg_init@sev_seg.seg.dir	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISD(SFR_1[1]), TRISB(SFR_1[1]), 

    S24$port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTD(SFR_1[1]), PORTB(SFR_1[1]), 

    sev_seg_init@sev_seg.digit.port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTD(SFR_1[1]), PORTB(SFR_1[1]), 

    S24$dir	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISD(SFR_1[1]), TRISB(SFR_1[1]), 

    sev_seg_init@sev_seg.digit.dir	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISD(SFR_1[1]), TRISB(SFR_1[1]), 

    sev_seg_init@sev_seg	PTR struct . size(2) Largest target is 99
		 -> seven_segment(BANK0[75]), 


Critical Paths under _main in COMRAM

    _main->_sev_seg_init

Critical Paths under _ISR in COMRAM

    _ISR->_sev_seg_scan
    _sev_seg_scan->___lwdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0     856
                                             52 COMRAM     2     2      0
                                              0 BANK0      3     3      0
                       _sev_seg_init
 ---------------------------------------------------------------------------------
 (1) _sev_seg_init                                        13    11      2     520
                                             39 COMRAM    13    11      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                 10    10      0    2107
                                             29 COMRAM    10    10      0
                       _sev_seg_scan
 ---------------------------------------------------------------------------------
 (3) _sev_seg_scan                                        22    20      2    2107
                                              7 COMRAM    22    20      2
                            ___lwdiv
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     355
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     211
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     214
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _sev_seg_init

 _ISR (ROOT)
   _sev_seg_scan
     ___lwdiv
     ___lwmod
     ___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      3      4E       4       48.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     36      36       1       57.4%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      84       9        0.0%
DATA                 0      0      84      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Sat Feb 12 23:38:09 2022

                                 l53 0D12                  ___wmul@multiplicand 0003  
                                u430 0C18                                  u414 0B5A  
                                u431 0C14                                  u415 0B56  
                                u424 0BCC                                  u425 0BC8  
                                u460 0D12                                  u444 0C4E  
                                _ISR 0008                                  u461 0D0E  
                                u445 0C4A                                  u454 0CC0  
                                u455 0CBC                                  u650 0DBC  
                                u651 0DB8                                  u660 0E16  
                                u661 0E12                                  u670 0E3A  
                                u671 0E36                                  u680 0E78  
                                u681 0E74                                  u697 0E86  
                                prod 000FF3                                  wreg 000FE8  
                               ?_ISR 0001                                 l1100 0D00  
                               l1102 0D02                                 l1230 0D3C  
                               l1080 0B24                                 l1240 0D56  
                               l1232 0D3E                                 l1090 0C08  
                               l1242 0D58                                 l1234 0D40  
                               l1226 0D14                                 l1092 0C18  
                               l1260 0DBC                                 l1244 0D5A  
                               l1236 0D46                                 l1228 0D3A  
                               l1086 0B28                                 l1270 0E06  
                               l1254 0D66                                 l1246 0D5C  
                               l1238 0D54                                 l1088 0C06  
                               l1280 0E3A                                 l1272 0E16  
                               l1256 0DAA                                 l1248 0D5E  
                               l1098 0C1C                                 l1290 0E66  
                               l1282 0E50                                 l1274 0E1E  
                               l1266 0DC0                                 l1258 0DAC  
                               l1292 0E68                                 l1276 0E2A  
                               l1268 0E04                                 l1294 0E78  
                               l1278 0E2C                                 l1288 0E56  
                               l1296 0E7C                                 i2l57 0B22  
                               i2l82 0058                                 _WPUB 000F61  
                               _main 0D14                                 fsr1h 000FE2  
                               fsr2h 000FDA                                 indf2 000FDF  
                               fsr1l 000FE1                                 fsr2l 000FD9  
                               btemp 0037                                 prodh 000FF4  
                               prodl 000FF3                                 start 0084  
                       ___param_bank 000000                                ??_ISR 001E  
                              ?_main 0001                      __end_of___lwdiv 0F10  
                              i2l101 0F98                      __end_of___lwmod 0F74  
                              i2l602 0F6A                                i2l609 0F72  
                              i2l592 0F06                                i2l599 0F0E  
                              _TMR1H 000FCF                                _TMR1L 000FCE  
                              _PORTB 000F81                                _PORTD 000F83  
                              _TRISB 000F93                                _TRISD 000F95  
                              main@i 00AC                                tablat 000FF5  
                              ttemp5 0038                                ttemp6 003B  
                              ttemp7 003F                                status 000FD8  
                              wtemp8 0038                      __initialization 0F9A  
                       __end_of_main 0E9C                               ??_main 0035  
                      __activetblptr 000001                  sev_seg_init@sev_seg 0028  
                             _ANSELA 000F38                               _ANSELB 000F39  
                             _ANSELC 000F3A                               _ANSELD 000F3B  
                             _ANSELE 000F3C                               i2l1200 0A52  
                             i2l1112 065A                               i2l1104 0612  
                             i2l1050 0EC6                               i2l1042 0E9C  
                             i2l1210 0AEE                               i2l1202 0A66  
                             i2l1122 068A                               i2l1114 0676  
                             i2l1106 0616                               i2l1060 0EFA  
                             i2l1052 0ED4                               i2l1044 0EA4  
                             i2l1036 0F74                               i2l1212 0B12  
                             i2l1204 0AD8                               i2l1140 0748  
                             i2l1124 06F6                               i2l1116 0686  
                             i2l1132 0720                               i2l1108 0628  
                             i2l1220 004E                               i2l1062 0F00  
                             i2l1054 0EDA                               i2l1046 0EB6  
                             i2l1070 0F32                               i2l1038 0F90  
                             i2l1206 0ADA                               i2l1142 07B4  
                             i2l1134 0744                               i2l1126 06F8  
                             i2l1222 0050                               i2l1214 0032  
                             i2l1056 0EF0                               i2l1048 0EBE  
                             i2l1072 0F40                               i2l1064 0F10  
                             i2l1208 0ADE                               i2l1160 08F6  
                             i2l1144 07B6                               i2l1128 0708  
                             i2l1224 0054                               i2l1216 0040  
                             i2l1058 0EF8                               i2l1074 0F56  
                             i2l1066 0F22                               i2l1170 0926  
                             i2l1154 0878                               i2l1146 07C6  
                             i2l1218 004C                               i2l1076 0F5E  
                             i2l1068 0F2A                               i2l1180 0994  
                             i2l1172 0928                               i2l1156 08E4  
                             i2l1148 0874                               i2l1078 0F64  
                             i2l1190 0A24                               i2l1182 099C  
                             i2l1174 0938                               i2l1166 08FA  
                             i2l1158 08E6                               i2l1184 09D0  
                             i2l1192 0A4A                               i2l1176 0948  
                             i2l1168 0922                               i2l1194 0A4E  
                             i2l1186 09D2                               i2l1178 0978  
                             i2l1188 09F0                               _INTCON 000FF2  
                   __end_of_char_map 0611                               ___wmul 0F74  
                          ??___lwdiv 0005                            ??___lwmod 0005  
                             clear_0 0FA0                               isa$std 000001  
                sev_seg_scan@sev_seg 0008                         __mediumconst 0000  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8                           __accesstop 0060  
            __end_of__initialization 0FA6  sev_seg_scan@is_special_char_enabled 0015  
                      ___rparam_used 000001                       __pcstackCOMRAM 0001  
                         __pbssBANK0 0060                              ?___wmul 0001  
                            i2u40_40 0F56                              i2u40_41 0F52  
                            i2u50_40 0708                              i2u50_41 0704  
                            i2u35_40 0EB6                              i2u35_41 0EB2  
                            i2u51_44 077A                              i2u51_45 0776  
                            i2u36_40 0ED4                              i2u60_40 0A66  
                            i2u52_40 07C6                              i2u36_41 0ED0  
                            i2u60_41 0A62                              i2u52_41 07C2  
                            i2u37_40 0EF0                              i2u37_41 0EEC  
                            i2u61_44 0A98                              i2u53_44 0816  
                            i2u61_45 0A94                              i2u53_45 0812  
                            i2u38_40 0F22                              i2u62_40 0AEE  
                            i2u38_41 0F1E                              i2u62_41 0AEA  
                            i2u54_44 08AA                              i2u54_45 08A6  
                            i2u39_40 0F40                              i2u63_40 0B12  
                            i2u55_40 08F6                              i2u47_40 0656  
                            i2u39_41 0F3C                              i2u63_41 0B0E  
                            i2u55_41 08F2                              i2u47_41 0652  
                            i2u56_40 0922                              i2u48_40 0676  
                            i2u64_40 0040                              i2u56_41 091E  
                            i2u48_41 0672                              i2u64_41 003C  
                            i2u57_40 0938                              i2u57_41 0934  
                            i2u49_44 06BC                              i2u49_45 06B8  
                            i2u58_40 0948                              i2u58_41 0944  
                            i2u59_40 09F0                              i2u59_41 09EC  
                            __Hparam 0000                              __Lparam 0000  
                    __size_of___wmul 0026                              ___lwdiv 0E9C  
                            ___lwmod 0F10                         __psmallconst 0600  
                            __pcinit 0F9A                              __ramtop 0600  
                            __ptext0 0D14                              __ptext1 0B24  
                            __ptext3 0612                              __ptext4 0F74  
                            __ptext5 0F10                              __ptext6 0E9C  
                       __size_of_ISR 007C                            _T1CONbits 000FCD  
                      ?_sev_seg_init 0028                        ?_sev_seg_scan 0008  
               end_of_initialization 0FA6                              postdec1 000FE5  
                            postdec2 000FDD                              postinc0 000FEE  
                            postinc1 000FE6                              postinc2 000FDE  
                          _PORTBbits 000F81                       ??_sev_seg_init 002A  
                     ??_sev_seg_scan 000A                            _TRISBbits 000F93  
                  sev_seg_init@i_437 0034                    sev_seg_scan@i_463 001C  
                  sev_seg_scan@i_464 0019                    sev_seg_scan@i_465 0016  
                  sev_seg_scan@i_466 001D                    sev_seg_scan@i_459 001B  
                     __end_of___wmul 0F9A                  start_initialization 0F9A  
                        __end_of_ISR 0084                             ??___wmul 0005  
                      __pcstackBANK0 00AB                 __end_of_sev_seg_init 0D14  
               __end_of_sev_seg_scan 0B24                     ___lwdiv@dividend 0001  
                          __pintcode 0008                             ?___lwdiv 0001  
                           ?___lwmod 0001                          __smallconst 0600  
                   ___lwdiv@quotient 0005                       ___wmul@product 0005  
                           _PIE1bits 000F9D                             _PIR1bits 000F9E  
                          main@i_532 00AD                            main@i_553 00AB  
                  ___wmul@multiplier 0001                             __Hrparam 0000  
                           __Lrparam 0000                         __Lsmallconst 0600  
                   __size_of___lwdiv 0074                     __size_of___lwmod 0064  
                      _seven_segment 0060                sev_seg_scan@digit_val 0018  
                           _char_map 0601                      ___lwdiv@divisor 0003  
                    ___lwdiv@counter 0007                __size_of_sev_seg_init 01F0  
              __size_of_sev_seg_scan 0512                        sev_seg_init@i 0033  
                      sev_seg_scan@i 001A                        sev_seg_scan@j 0017  
                      __size_of_main 0188                             isa$xinst 000000  
                           int$flags 0037                         _sev_seg_init 0B24  
                         _INTCONbits 000FF2                         _sev_seg_scan 0612  
                           intlevel2 0000                     ___lwmod@dividend 0001  
                         _OSCCONbits 000FD3                      ___lwmod@divisor 0003  
                    ___lwmod@counter 0005  
